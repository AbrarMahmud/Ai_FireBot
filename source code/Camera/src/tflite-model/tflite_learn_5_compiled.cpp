/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 27.07.2023 18:26:12

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242432;
#else
constexpr int kTensorArenaSize = 241408;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[27];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int8_t tensor_data2[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 50,-2,33, -2,-21,18, -127,-120,-66, 
  /* [1][1][][] */ 4,-4,1, -19,4,-3, 3,-30,7, 
  /* [1][2][][] */ -3,17,-1, -4,7,-2, 39,-20,12, 
  /* [2][0][][] */ 25,-8,-9, 71,110,-2, 41,-34,9, 
  /* [2][1][][] */ 8,11,-2, 70,127,-24, 22,-2,-4, 
  /* [2][2][][] */ 50,-61,22, 78,-35,-14, 35,-49,18, 
  /* [3][0][][] */ 3,30,2, 33,93,22, 0,5,-5, 
  /* [3][1][][] */ 19,34,5, 69,127,30, -14,-19,3, 
  /* [3][2][][] */ 7,4,6, 27,27,10, -3,-6,0, 
  /* [4][0][][] */ 38,76,-14, 10,80,-18, -22,4,-8, 
  /* [4][1][][] */ 45,102,46, 28,120,26, 26,49,-21, 
  /* [4][2][][] */ 62,87,37, 44,127,9, -26,23,15, 
  /* [5][0][][] */ 11,6,-119, 2,7,-95, 1,35,-19, 
  /* [5][1][][] */ 7,-38,-127, 4,-39,-108, 6,19,-16, 
  /* [5][2][][] */ -1,13,-16, 4,2,-10, 7,19,-5, 
  /* [6][0][][] */ 27,-63,36, 50,-87,42, 12,-18,11, 
  /* [6][1][][] */ 39,-96,64, 67,-127,75, 10,-26,19, 
  /* [6][2][][] */ 22,-34,15, 17,-42,28, -10,11,2, 
  /* [7][0][][] */ -31,15,4, -108,-40,1, -27,21,6, 
  /* [7][1][][] */ -14,-8,1, -127,-93,-8, -9,-7,4, 
  /* [7][2][][] */ -23,30,-9, -13,10,0, -23,24,-3, 
  /* [8][0][][] */ 123,127,116, 122,127,115, 122,125,114, 
  /* [8][1][][] */ 124,125,115, 121,124,113, 122,124,112, 
  /* [8][2][][] */ 122,124,114, 121,124,113, 122,124,113, 
  /* [9][0][][] */ -19,0,12, -11,-3,3, 7,8,-6, 
  /* [9][1][][] */ 93,110,-8, 75,127,19, -5,22,29, 
  /* [9][2][][] */ -23,-23,18, 5,-29,3, 10,3,-19, 
  /* [10][0][][] */ -25,-83,-18, 34,95,20, -9,-13,-2, 
  /* [10][1][][] */ -59,-103,-14, 79,127,14, -17,-27,-1, 
  /* [10][2][][] */ -32,-20,2, 36,23,-11, -9,-1,7, 
  /* [11][0][][] */ -1,-12,10, 22,-24,18, 24,-72,-31, 
  /* [11][1][][] */ -29,-26,-6, -15,-41,-17, 7,-32,-27, 
  /* [11][2][][] */ 7,-21,-56, 119,127,71, -19,28,-26, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -50,-96,-17, -61,-110,-24, -9,-17,-5, 
  /* [13][1][][] */ 62,114,16, 58,127,25, 8,16,11, 
  /* [13][2][][] */ -8,-19,3, 1,-18,-1, 1,4,-4, 
  /* [14][0][][] */ 46,-4,-35, 79,-24,-47, 32,-8,-18, 
  /* [14][1][][] */ 90,-14,-69, 127,-36,-83, 59,-16,-34, 
  /* [14][2][][] */ 56,-6,-41, 75,-18,-48, 27,-4,-16, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension2 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant2_scale = { 16, { 3.3410194077987398e-07, 0.09068521112203598, 0.078029751777648926, 0.017258130013942719, 0.0049480102024972439, 0.10294650495052338, 0.047675210982561111, 0.11107318103313446, 0.001346223521977663, 0.017857393249869347, 0.060759469866752625, 0.014104419387876987, 2.9411381774480105e-07, 0.039119411259889603, 0.05367734283208847, 3.1706054670621597e-08, } };
const TfArray<16, int> quant2_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[16] = { -1073741824, 3074, -48153, 23159, 183002, -39, 16678, -3762, -61110, 33364, 12939, 97962, -1073741824, 24185, 9860, -1073741824, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 1.3102037232926023e-09, 0.00035562828998081386, 0.00030599904130212963, 6.7678942286875099e-05, 1.9403962141950615e-05, 0.00040371180512011051, 0.00018696162442211062, 0.00043558113975450397, 5.2793084250879474e-06, 7.0028996560722589e-05, 0.00023827244876883924, 5.5311451433226466e-05, 1.1533876076441629e-09, 0.00015340946265496314, 0.00021049939095973969, 1.243374708748135e-10, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[1*3*3*16] = { 
  /* [0][0][][] */ -108,18,-82,-127,39,-67,80,-76,-90,-3,-8,29,-127,5,54,-73, 51,25,-127,127,127,-127,127,-127,-85,127,-127,51,-105,5,127,-25, 24,-24,89,-2,-72,68,-95,78,-95,-27,4,-15,61,1,-102,-29, 
  /* [0][1][][] */ -127,127,-23,13,-44,16,-29,14,-28,1,3,-109,-49,8,-30,-14, -78,-42,-58,-15,-8,-25,8,-27,-108,-89,21,-12,-104,-127,1,23, 14,1,64,2,3,34,-25,34,-127,6,-2,2,-21,12,-4,43, 
  /* [0][2][][] */ -115,-73,68,2,-6,39,-39,52,-77,0,0,4,40,2,-27,23, 23,-4,30,-2,-27,40,-34,21,-125,-13,0,84,-58,0,-29,-111, 21,-7,19,0,4,15,9,23,-115,4,-1,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension4 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant4_scale = { 16, { 0.079427838325500488, 0.013167616911232471, 0.0016834535636007786, 0.015732839703559875, 0.0069924280978739262, 0.022921120747923851, 0.016529876738786697, 0.22653086483478546, 0.00086559029296040535, 0.014578198082745075, 0.0089690014719963074, 0.031270604580640793, 0.030907778069376945, 0.012128033675253391, 0.0077560250647366047, 0.16606816649436951, } };
const TfArray<16, int> quant4_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 3 };
const ALIGN(16) int32_t tensor_data5[16] = { -161, 8493, 101278, 9437, 10942, 6089, 13280, 728, -13638, 5123, 28650, 14142, -445, 24683, 11509, -107, };
const TfArray<1, int> tensor_dimension5 = { 1, { 16 } };
const TfArray<16, float> quant5_scale = { 16, { 0.0018688903655856848, 0.00030982628231868148, 3.9610673411516473e-05, 0.00037018448347225785, 0.00016452772251795977, 0.00053932052105665207, 0.00038893829332664609, 0.0053301379084587097, 2.0366831449791789e-05, 0.00034301643609069288, 0.00021103533799760044, 0.00073577894363552332, 0.00072724185883998871, 0.00028536550235003233, 0.00018249471031595021, 0.003907486330717802, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[8*1*1*16] = { 
  /* [0][0][][] */ 0,-23,-1,-1,127,1,2,-4,1,-123,-91,-5,0,127,-3,0, 
  /* [1][0][][] */ 0,-28,0,87,72,16,20,3,-1,-7,127,-45,0,30,-13,0, 
  /* [2][0][][] */ 0,0,0,-8,-60,4,13,3,0,3,-20,0,0,127,-9,0, 
  /* [3][0][][] */ 0,-8,-22,-127,80,22,68,15,1,60,1,40,0,1,18,0, 
  /* [4][0][][] */ 0,48,-25,35,-57,31,127,13,-1,-60,18,-10,0,-7,19,0, 
  /* [5][0][][] */ 0,-18,-12,-1,-22,-21,-11,17,-1,11,-4,-45,0,-3,127,0, 
  /* [6][0][][] */ 0,16,-1,1,46,-21,-29,-8,2,-111,115,59,0,127,57,0, 
  /* [7][0][][] */ 0,12,-16,127,9,2,15,12,1,68,-51,79,0,-7,48,0, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant6_scale = { 8, { 0.092654742300510406, 0.10246317088603973, 0.10100928694009781, 0.047953281551599503, 0.055536460131406784, 0.089393757283687592, 0.065340206027030945, 0.042870879173278809, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { -1341, -41962, -8589, -12277, -32469, -2692, -23054, -28117, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 0.0021801115944981575, 0.0024108982179313898, 0.0023766891099512577, 0.0011283125495538116, 0.0013067402178421617, 0.0021033824887126684, 0.0015374165959656239, 0.0010087265400215983, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[48*1*1*8] = { 
  /* [0][0][][] */ 17,-127,51,-48,31,-15,-53,21, 
  /* [1][0][][] */ 75,74,-15,-94,9,1,-79,127, 
  /* [2][0][][] */ 34,10,-39,127,51,123,48,94, 
  /* [3][0][][] */ 78,77,-80,127,-90,-10,-4,13, 
  /* [4][0][][] */ -39,-102,73,11,13,36,-46,-127, 
  /* [5][0][][] */ 16,9,-37,39,1,-33,40,127, 
  /* [6][0][][] */ 74,-9,-124,-98,127,23,65,-41, 
  /* [7][0][][] */ 127,15,28,-21,30,0,82,-61, 
  /* [8][0][][] */ 21,-98,17,108,-3,28,-13,-127, 
  /* [9][0][][] */ 106,-127,12,-9,-15,15,-127,80, 
  /* [10][0][][] */ -127,-40,-117,19,-19,4,-100,51, 
  /* [11][0][][] */ -21,-42,-9,-105,-127,-34,44,-18, 
  /* [12][0][][] */ 18,5,-41,67,-81,-26,61,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -11,-37,-8,10,36,127,45,37, 
  /* [15][0][][] */ 37,3,16,-127,65,37,-55,75, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 15,22,127,23,-24,-8,25,23, 
  /* [18][0][][] */ 95,-127,31,38,-10,21,-114,5, 
  /* [19][0][][] */ -127,-17,25,61,-67,-52,-102,63, 
  /* [20][0][][] */ 32,29,-45,111,-22,-127,-3,61, 
  /* [21][0][][] */ 57,22,127,7,-12,-10,63,11, 
  /* [22][0][][] */ -76,-20,-127,7,7,9,-92,6, 
  /* [23][0][][] */ -102,116,-21,-23,4,-12,127,-73, 
  /* [24][0][][] */ 9,-53,-47,88,-10,-61,100,127, 
  /* [25][0][][] */ 10,46,33,32,127,123,-74,-54, 
  /* [26][0][][] */ -87,-33,-127,-1,8,17,-92,-4, 
  /* [27][0][][] */ 5,-20,-22,13,-42,127,61,43, 
  /* [28][0][][] */ 8,-10,-13,42,34,127,46,53, 
  /* [29][0][][] */ 85,27,127,1,-22,-8,82,-10, 
  /* [30][0][][] */ -74,127,-20,-26,13,0,92,-53, 
  /* [31][0][][] */ -49,-100,-25,-2,33,-74,127,105, 
  /* [32][0][][] */ 5,-2,-52,117,-21,102,90,127, 
  /* [33][0][][] */ 7,65,-8,-102,9,-12,-8,127, 
  /* [34][0][][] */ -28,93,-4,-107,25,-12,21,127, 
  /* [35][0][][] */ 127,7,-15,-41,20,25,102,-41, 
  /* [36][0][][] */ -127,-12,25,72,-41,13,-112,88, 
  /* [37][0][][] */ -3,-18,-4,23,27,127,51,46, 
  /* [38][0][][] */ 12,19,5,79,127,-1,-20,34, 
  /* [39][0][][] */ 8,26,34,-118,28,-6,-41,127, 
  /* [40][0][][] */ 98,25,127,0,-11,-12,92,-6, 
  /* [41][0][][] */ 0,-29,-35,92,55,127,78,110, 
  /* [42][0][][] */ -73,-4,127,25,-32,12,-22,60, 
  /* [43][0][][] */ -10,-49,11,95,-16,8,14,-127, 
  /* [44][0][][] */ 31,-12,-77,-127,60,-24,-7,-112, 
  /* [45][0][][] */ -87,127,2,-57,5,4,70,-64, 
  /* [46][0][][] */ -127,-19,36,17,-28,29,-79,38, 
  /* [47][0][][] */ 107,18,116,2,34,-21,127,-14, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant8_scale = { 48, { 0.0009629460982978344, 0.0010105172405019403, 0.00064851681236177683, 0.00063950585899874568, 0.0005891468608751893, 0.00059340160805732012, 0.00094428058946505189, 0.0028308711480349302, 0.00084768212400376797, 0.0045221610926091671, 0.0012576391454786062, 0.0035161033738404512, 0.00033915613312274218, 3.937008052901092e-09, 0.002247694181278348, 0.00038197648245841265, 3.937008052901092e-09, 0.013516195118427277, 0.00074702838901430368, 0.00082683906657621264, 0.00053300091531127691, 0.0093299457803368568, 0.00065390748204663396, 0.0028626006096601486, 0.0019241177942603827, 0.001156216487288475, 0.0045054084621369839, 0.0042520882561802864, 0.00060622964520007372, 0.0034378981217741966, 0.0023713053669780493, 0.0002885403810068965, 0.00038139379466883838, 0.022580843418836594, 0.0010024814400821924, 0.0014091320335865021, 0.0097545487806200981, 0.00082559249131008983, 0.0048568281345069408, 0.00062290066853165627, 0.0025468349922448397, 0.00035287192440591753, 0.0012236600741744041, 0.021365666761994362, 0.00073711998993530869, 0.00092924479395151138, 0.00081019825302064419, 0.00042348066926933825, } };
const TfArray<48, int> quant8_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[48] = { 3620, 95, 8042, 4847, 5597, 5814, 6696, -16, -9, -273, 1936, 401, 10711, -68273512, 1932, 14317, -55113920, -88, -429, 7739, 3326, -14, 4, 373, 3261, -794, 56, 476, 3037, 1429, 2078, 13535, 3321, 238, 218, -1450, 260, 2554, -128, 9237, 1844, 10324, -222, -66, 11262, 190, 5708, 3376, };
const TfArray<1, int> tensor_dimension9 = { 1, { 48 } };
const TfArray<48, float> quant9_scale = { 48, { 0.00058101920876652002, 0.00060972257051616907, 0.00039129992364905775, 0.0003858629206661135, 0.00035547747393138707, 0.00035804469371214509, 0.00056975689949467778, 0.0017080816905945539, 0.00051147164776921272, 0.0027285665273666382, 0.00075883016688749194, 0.0021215348970144987, 0.0002046388981398195, 2.3754989086910427e-09, 0.0013562062522396445, 0.00023047570721246302, 2.3754989086910427e-09, 0.0081553570926189423, 0.00045073952060192823, 0.00049889541696757078, 0.00032160032424144447, 0.0056294719688594341, 0.00039455253863707185, 0.001727226423099637, 0.0011609678622335196, 0.0006976340664550662, 0.0027184584178030491, 0.002565610921010375, 0.00036578482831828296, 0.0020743475761264563, 0.0014307904057204723, 0.00017409854626748711, 0.00023012411838863045, 0.01362475473433733, 0.00060487393056973815, 0.00085023744031786919, 0.0058856671676039696, 0.00049814325757324696, 0.0029304968193173409, 0.00037584375240840018, 0.0015367008745670319, 0.00021291468874551356, 0.00073832797352224588, 0.012891544960439205, 0.000444761011749506, 0.00056068465346470475, 0.00048885471187531948, 0.00025551836006343365, } };
const TfArray<48, int> quant9_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[1*3*3*48] = { 
  /* [0][0][][] */ -42,-22,-6,-17,8,-39,-79,-68,-27,-50,8,65,34,-71,114,-42,-113,-84,37,-6,-1,-72,-111,-79,-35,-124,-64,-22,70,15,95,27,-127,-90,-6,54,18,48,-127,78,-76,-15,105,-109,-2,-36,-87,108, 75,12,-27,-29,57,-127,-127,-81,61,-76,-115,110,37,-82,-1,62,-52,-111,59,7,12,-112,-127,-70,-4,-127,-121,-41,-55,21,-57,54,28,-127,65,85,13,73,-91,127,-127,6,123,-127,1,-23,-127,95, -31,44,7,-5,-65,-109,-59,-17,87,-7,-127,40,8,-71,-101,-11,-127,-24,26,12,-15,-75,-35,-24,-11,-29,-58,-12,-10,18,-24,10,106,-87,71,31,14,35,-4,16,-79,3,7,-80,-17,5,-55,14, 
  /* [0][1][][] */ -85,-127,-45,-44,-10,55,99,-105,-27,-108,-20,111,90,-64,27,-96,-121,-94,90,-77,41,-89,-103,-127,42,-118,-79,-37,127,-59,127,85,-43,-84,-14,85,-36,-77,-108,89,42,59,104,-110,-91,-119,82,119, 127,-84,-127,-127,127,41,94,-127,101,-127,-110,127,127,-14,-6,127,-60,-127,127,-127,127,-127,-120,-119,127,-101,-127,-127,-119,-127,-71,127,28,-111,127,127,-69,-127,-96,89,61,127,127,-118,-113,-127,125,127, -52,32,-62,-85,-121,-23,31,-37,127,-19,-76,37,55,-70,-26,-43,-37,-30,54,-71,56,-81,-38,-24,48,-5,-45,-60,15,-89,-35,21,30,-99,117,22,-36,-63,1,-15,37,53,10,-76,-58,-38,65,35, 
  /* [0][2][][] */ -60,-107,-33,-33,0,34,-5,-34,-39,-59,-14,59,76,-127,-127,-64,-43,-20,64,75,51,-34,-13,-59,32,-55,-11,-58,75,28,77,63,107,-26,-37,-9,-94,35,-18,30,9,37,15,-58,96,-78,3,30, 87,-74,-87,-85,81,19,7,-46,48,-70,-31,56,82,-26,16,92,-24,-32,78,118,81,-56,-19,-57,94,-69,-19,-99,-51,39,-46,111,-19,-49,66,7,-127,51,-14,-1,10,32,16,-68,127,-100,-12,40, -28,31,-41,-36,-81,-19,22,-11,59,-4,-11,33,30,-43,111,-29,-93,-5,30,60,73,-31,-2,-3,43,1,-4,-63,-14,28,-20,40,-89,-42,65,3,-19,21,27,-39,6,35,-6,-16,62,-35,-4,17, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.0046190889552235603, 0.0029193686787039042, 0.0054218857549130917, 0.0049124197103083134, 0.0080834906548261642, 0.0083807641640305519, 0.0060809277929365635, 0.0031680071260780096, 0.0042016301304101944, 0.0014684313209727407, 0.0030334996990859509, 0.0010480544297024608, 0.0080584650859236717, 0.23551659286022186, 0.0022530402056872845, 0.010813851840794086, 0.1168077290058136, 0.00091289804549887776, 0.0045504816807806492, 0.006277705542743206, 0.0050452300347387791, 0.0064199795015156269, 0.0045972801744937897, 0.0015264243120327592, 0.0038990385364741087, 0.0031467997469007969, 0.0012379811378195882, 0.0017830567667260766, 0.014660577289760113, 0.0022045029327273369, 0.00238415552303195, 0.0096807694062590599, 0.0089047839865088463, 0.00035042237141169608, 0.0037367155309766531, 0.0084117799997329712, 0.00056644174037501216, 0.016691474243998528, 0.0011975553352385759, 0.0035671386867761612, 0.00264573167078197, 0.0071977050974965096, 0.0045277238823473454, 0.00036086264299228787, 0.0078816730529069901, 0.0035336250439286232, 0.0083399591967463493, 0.0048535875976085663, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 3 };
const ALIGN(16) int32_t tensor_data11[48] = { 54823, 57858, 62296, 42713, 137, 13442, 2870, 25743, 22518, 25760, 26904, 2445, -45906, -127, 49270, 761, -204, 39812, 1646, 2057, -15653, 15117, 53661, 30439, -19767, 37758, 40829, 23014, -2185, 16230, -7410, -51377, 11834, 104747, 28742, 1736, 57984, -355, 166160, -23116, 14892, -26153, 2676, 112911, -1352, 70511, 1648, -22300, };
const TfArray<1, int> tensor_dimension11 = { 1, { 48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.0001086844495148398, 6.8691027991008013e-05, 0.00012757378863170743, 0.00011558635014807805, 0.00019019978935830295, 0.00019719445845112205, 0.00014308065874502063, 7.4541349022183567e-05, 9.8861884907819331e-05, 3.4551325370557606e-05, 7.1376467531081289e-05, 2.4660104827489704e-05, 0.00018961094610858709, 0.005541567225009203, 5.3012710850453004e-05, 0.00025444358470849693, 0.0027484172023832798, 2.1479954739334062e-05, 0.00010707016190281138, 0.00014771071437280625, 0.00011871129390783608, 0.00015105833881534636, 0.00010817129805218428, 3.591586573747918e-05, 9.1742083895951509e-05, 7.404234929708764e-05, 2.9128968890290707e-05, 4.195427754893899e-05, 0.0003449547803029418, 5.1870658353436738e-05, 5.6097778724506497e-05, 0.00022778281709179282, 0.00020952433987986296, 8.2452324932091869e-06, 8.7922722741495818e-05, 0.00019792423699982464, 1.3328040950000286e-05, 0.00039274059236049652, 2.817777385644149e-05, 8.3932674897368997e-05, 6.2252511270344257e-05, 0.00016935776511672884, 0.00010653468052623793, 8.4908861026633531e-06, 0.00018545113562140614, 8.3144121163059026e-05, 0.00019623433763626963, 0.00011420206283219159, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int8_t tensor_data12[8*1*1*48] = { 
  /* [0][0][][] */ -12,1,9,-96,7,26,8,9,3,5,0,-6,103,0,2,3,0,-6,-7,0,82,-1,1,6,33,37,13,10,3,5,2,-127,12,11,-3,1,-26,1,-18,34,8,-24,-9,3,0,0,2,2, 
  /* [1][0][][] */ -38,-8,3,-7,47,27,-29,76,22,6,-31,-20,12,0,17,37,0,41,19,-50,0,22,127,19,-29,-4,52,4,23,0,17,-13,16,-9,-4,-25,7,-56,10,4,-5,-10,-82,-6,-38,6,-51,-102, 
  /* [2][0][][] */ -59,15,3,15,46,-8,32,21,-11,55,11,-3,0,0,6,55,0,11,-127,26,-2,13,4,-19,-35,2,33,9,9,36,20,1,4,-9,-8,-13,13,5,6,2,39,-10,-29,0,24,-56,25,14, 
  /* [3][0][][] */ 1,2,1,9,-1,26,0,-5,63,15,-2,-1,24,0,-28,-12,0,-2,-10,2,-4,1,7,-16,-13,-8,-12,-3,-7,-3,-1,-11,-48,40,-53,-2,2,1,1,-127,1,4,2,-47,-1,0,3,7, 
  /* [4][0][][] */ -1,-1,83,37,3,-27,0,1,4,-3,-5,-12,-84,0,-11,4,0,14,6,0,66,13,1,-4,-17,28,-5,46,-10,-5,0,102,4,6,-3,-4,17,-15,-14,-19,-4,-127,4,2,-1,-3,-2,-2, 
  /* [5][0][][] */ -10,46,7,-7,3,43,27,13,-20,27,3,55,24,0,-127,-2,0,15,-39,22,-11,12,-16,38,-23,-5,24,-3,-13,24,24,-18,50,26,-40,-6,7,18,-48,16,24,-13,-11,28,21,60,22,22, 
  /* [6][0][][] */ -18,-52,3,6,38,-42,-22,4,25,-27,-7,88,-7,0,-127,38,0,-13,46,-18,-9,-1,26,-35,28,-3,-6,-10,45,-12,-15,-8,93,-34,27,1,-5,-9,-67,-22,-12,-16,-4,-25,-20,-81,-14,-25, 
  /* [7][0][][] */ -116,-22,-13,6,127,17,66,26,11,4,24,-37,-30,0,88,104,0,10,-1,64,-11,-3,-27,44,18,-2,43,7,49,65,56,-10,-5,-18,-22,-26,4,27,21,33,76,5,-28,-12,62,4,69,76, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant12_scale = { 8, { 0.059161778539419174, 0.029909120872616768, 0.056675281375646591, 0.055651996284723282, 0.042712032794952393, 0.053982876241207123, 0.037766367197036743, 0.03055301308631897, } };
const TfArray<8, int> quant12_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int32_t tensor_data13[8] = { -5439, -24538, 24705, 22475, 4293, 2861, 36331, 11067, };
const TfArray<1, int> tensor_dimension13 = { 1, { 8 } };
const TfArray<8, float> quant13_scale = { 8, { 0.0013920419150963426, 0.00070374400820583105, 0.0013335361145436764, 0.0013094587484374642, 0.0010049890261143446, 0.0012701853411272168, 0.0008886204450391233, 0.00071889441460371017, } };
const TfArray<8, int> quant13_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int8_t tensor_data14[48*1*1*8] = { 
  /* [0][0][][] */ 75,26,-9,-13,127,30,-42,-26, 
  /* [1][0][][] */ -11,0,5,127,14,-6,5,16, 
  /* [2][0][][] */ 37,-127,-22,39,-16,-75,83,9, 
  /* [3][0][][] */ 127,-33,-9,21,-10,-23,26,-3, 
  /* [4][0][][] */ 11,-48,127,-4,-12,-57,18,-86, 
  /* [5][0][][] */ 61,7,-6,-4,127,15,-8,-4, 
  /* [6][0][][] */ -21,87,-11,127,18,47,-74,-50, 
  /* [7][0][][] */ -7,127,-7,-1,1,-17,18,0, 
  /* [8][0][][] */ 127,46,-10,0,-43,-29,5,-29, 
  /* [9][0][][] */ -127,17,9,25,53,19,-4,3, 
  /* [10][0][][] */ -76,-16,15,127,38,33,-13,2, 
  /* [11][0][][] */ -127,11,20,-62,38,16,-25,-55, 
  /* [12][0][][] */ 127,26,0,19,-44,-8,-1,-47, 
  /* [13][0][][] */ -8,90,-127,-1,4,109,-85,72, 
  /* [14][0][][] */ -54,-19,-10,127,24,2,-3,-20, 
  /* [15][0][][] */ -4,127,3,-7,0,-14,10,-52, 
  /* [16][0][][] */ -8,-127,-23,8,-9,-106,119,-27, 
  /* [17][0][][] */ 16,127,6,-16,13,75,-84,-24, 
  /* [18][0][][] */ 1,53,-127,7,-3,65,-43,63, 
  /* [19][0][][] */ -69,28,5,8,-127,14,4,13, 
  /* [20][0][][] */ -127,-27,7,0,68,-23,53,19, 
  /* [21][0][][] */ -52,-2,-8,-5,-127,-6,23,9, 
  /* [22][0][][] */ -127,-16,2,-2,75,-7,32,37, 
  /* [23][0][][] */ -21,-17,-7,-6,-1,72,-127,-87, 
  /* [24][0][][] */ -7,44,-127,5,7,50,-21,74, 
  /* [25][0][][] */ 98,-42,0,127,-70,-12,10,-48, 
  /* [26][0][][] */ 0,-23,-4,0,-10,119,127,-27, 
  /* [27][0][][] */ 63,0,-3,16,127,42,37,-29, 
  /* [28][0][][] */ 4,127,-67,5,11,85,-30,124, 
  /* [29][0][][] */ -8,8,-3,-9,-2,85,-127,-78, 
  /* [30][0][][] */ 4,-2,-1,-127,-3,-1,-2,-15, 
  /* [31][0][][] */ -60,2,-1,0,-127,2,16,6, 
  /* [32][0][][] */ -19,38,12,-127,5,33,-95,-105, 
  /* [33][0][][] */ -55,-9,1,-1,-127,43,43,2, 
  /* [34][0][][] */ -127,69,8,23,34,-16,8,5, 
  /* [35][0][][] */ -10,127,-22,4,-15,-105,80,-29, 
  /* [36][0][][] */ -11,54,1,-22,0,90,-127,-27, 
  /* [37][0][][] */ 38,-50,-15,20,10,-127,113,-19, 
  /* [38][0][][] */ 18,-127,-2,-10,13,49,-45,68, 
  /* [39][0][][] */ 1,-127,-16,-3,1,-9,-57,-101, 
  /* [40][0][][] */ 118,48,-1,8,-62,91,-127,-110, 
  /* [41][0][][] */ 7,-118,22,0,-3,76,-55,127, 
  /* [42][0][][] */ 62,-7,0,-127,-62,-1,-9,-38, 
  /* [43][0][][] */ -79,-33,7,-127,43,-1,-6,1, 
  /* [44][0][][] */ -4,-21,-9,10,-29,101,127,-17, 
  /* [45][0][][] */ -127,-31,-2,3,7,3,24,-23, 
  /* [46][0][][] */ 14,73,127,6,0,14,12,23, 
  /* [47][0][][] */ -3,10,7,127,11,3,0,-9, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant14_scale = { 48, { 0.00021438969997689128, 0.00073429546318948269, 0.0005995976971462369, 0.00096247682813555002, 0.0036035678349435329, 0.0014361139619722962, 0.0024787532165646553, 0.0027334315236657858, 0.0014786518877372146, 0.0012726726708933711, 0.0015624108491465449, 0.0010186713188886642, 0.0012276466004550457, 0.0012290843296796083, 0.0014172939117997885, 0.0042538526467978954, 0.00088258180767297745, 0.0009397488902322948, 0.004517712164670229, 0.00031699100509285927, 0.00069551891647279263, 0.0010328305652365088, 0.0011892961338162422, 0.0024774621706455946, 0.0008387730922549963, 0.00053521571680903435, 0.00034115894231945276, 0.0010681562125682831, 0.0022081744391471148, 0.0025941689964383841, 0.0013119918294250965, 0.0011393413878977299, 0.0022074442822486162, 0.0006370747578330338, 0.00082242197822779417, 0.0006253393366932869, 0.0013322918675839901, 0.00085479405242949724, 0.00024769973242655396, 0.0056833778508007526, 0.0016202068654820323, 0.0025263950228691101, 0.00096985755953937769, 0.0010520892683416605, 0.00059251522179692984, 0.0012383686844259501, 0.002153327688574791, 0.0024547877255827188, } };
const TfArray<48, int> quant14_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int32_t tensor_data15[48] = { 43937, 6762, 5582, 7290, 1355, 7620, -1713, -219, 798, 2357, 3110, 347, 1728, -826, 662, -1875, 4002, 9904, -261, 18703, 3777, 2095, 7275, -457, 3199, 4725, 26015, 7467, -75, -2206, 65, 1627, -1980, 7625, 2858, 6438, 6028, 3366, 20856, 1753, -801, 2379, 1084, 2992, 4402, 1947, -1171, 2359, };
const TfArray<1, int> tensor_dimension15 = { 1, { 48 } };
const TfArray<48, float> quant15_scale = { 48, { 9.809724724618718e-05, 0.00033598800655454397, 0.00027435499941930175, 0.00044039584463462234, 0.0016488670371472836, 0.00065711565548554063, 0.0011341910576447845, 0.001250722911208868, 0.00067657954059541225, 0.00058233062736690044, 0.00071490474510937929, 0.00046610846766270697, 0.00056172825861722231, 0.00056238612160086632, 0.00064850429771468043, 0.0019464145880192518, 0.00040383866871707141, 0.00042999631841666996, 0.002067147521302104, 0.00014504403225146234, 0.00031824520556256175, 0.00047258724225685, 0.0005441804532893002, 0.0011336002498865128, 0.00038379331817850471, 0.00024489604402333498, 0.00015610244008712471, 0.0004887510440312326, 0.0010103835957124829, 0.0011870012385770679, 0.0006003216840326786, 0.00052132288692519069, 0.0010100494837388396, 0.00029150318005122244, 0.00037631162558682263, 0.00028613346512429416, 0.00060961028793826699, 0.00039112396189011633, 0.00011333876318531111, 0.0026005154941231012, 0.00074135017348453403, 0.0011559902923181653, 0.0004437729949131608, 0.00048139935825020075, 0.00027111431700177491, 0.00056663434952497482, 0.00098528771195560694, 0.0011232253164052963, } };
const TfArray<48, int> quant15_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int8_t tensor_data16[1*3*3*48] = { 
  /* [0][0][][] */ 4,-3,20,109,5,83,0,29,16,8,8,7,-8,-9,-46,8,-2,8,-22,-114,-6,-23,127,-10,-3,6,-5,9,-5,4,16,98,20,28,38,-28,1,35,-3,0,18,-68,-9,-7,17,2,-6,-10, 127,10,15,-127,28,89,11,11,124,127,7,43,-50,-24,5,8,127,-56,-59,-55,-100,25,-108,15,17,70,-31,-83,24,20,9,-124,5,-62,127,10,-40,-47,-6,115,-78,-97,-31,3,-35,-9,-127,23, -32,-2,8,15,-1,65,4,18,28,9,-13,31,-15,-3,16,4,-102,29,-3,79,-31,-12,-17,-6,-5,-59,-3,29,-16,5,3,-22,7,-24,16,-19,0,47,41,-13,50,39,-17,11,-43,2,-2,-6, 
  /* [0][1][][] */ 126,6,1,-99,14,-27,36,-16,9,9,-13,53,-7,-1,18,-33,0,-49,-60,-87,11,-74,-124,-18,5,99,-15,-127,-8,32,11,-109,17,-54,-3,127,-3,59,-43,39,-62,-127,39,-87,-44,-14,-12,-5, 26,-127,-127,116,-127,-127,-127,-127,-127,-96,127,-127,127,127,35,-127,-82,127,127,-107,127,127,112,127,127,-127,-127,28,-127,-127,94,127,-127,127,-29,-42,127,-127,127,127,127,-79,127,127,127,-122,102,106, 55,6,49,-13,5,-62,44,19,-23,15,-104,-8,-1,-40,127,4,63,-65,-72,85,14,-46,12,-33,1,6,-38,67,21,39,1,3,32,-45,9,67,-5,64,68,-11,-81,10,-85,-32,27,-17,-11,6, 
  /* [0][2][][] */ -54,-7,26,-17,7,35,-37,23,9,-24,11,32,6,-6,-38,17,5,22,-15,103,6,-32,-16,-12,-3,23,0,50,-10,2,46,-33,-18,-45,-32,-40,-1,31,8,-23,9,-4,42,-36,-36,17,-11,17, 68,126,75,22,17,-20,123,36,19,-3,43,26,-5,-1,-90,25,-58,-56,-37,121,-37,49,12,20,32,-62,-40,30,77,0,127,22,85,-27,7,-37,-25,-17,-13,119,-27,-11,-40,45,20,-32,7,-127, -42,-3,7,-3,5,-5,-62,8,-17,-10,-40,-40,19,-9,-9,11,33,24,-9,-127,24,-10,5,-9,-7,11,-10,-55,-14,8,6,8,-20,87,-36,-23,-5,36,26,-61,5,9,-38,7,-43,127,-5,-4, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.013470469042658806, 0.012871392071247101, 0.0076762507669627666, 0.013152245432138443, 0.0060166055336594582, 0.003878947114571929, 0.035996407270431519, 0.0055996221490204334, 0.005406936164945364, 0.0066228518262505531, 0.0042524496093392372, 0.0090902596712112427, 0.011034026741981506, 0.0091506065800786018, 0.0042110560461878777, 0.012055522762238979, 0.0094611505046486855, 0.010450765490531921, 0.0038565602153539658, 0.0068851704709231853, 0.0084270862862467766, 0.0084150033071637154, 0.0085465405136346817, 0.0066054114140570164, 0.0066896914504468441, 0.0061742253601551056, 0.022979484871029854, 0.0037203016690909863, 0.0086550163105130196, 0.029724741354584694, 0.0042215734720230103, 0.0070862174034118652, 0.04503944143652916, 0.0067869317717850208, 0.0084595540538430214, 0.0062544634565711021, 0.017055893316864967, 0.0059123784303665161, 0.011499724350869656, 0.00088853377383202314, 0.0058608078397810459, 0.0024488330818712711, 0.0063237184658646584, 0.0063475212082266808, 0.0061774542555212975, 0.0054644388146698475, 0.0087010627612471581, 0.0048720939084887505, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 3 };
const ALIGN(16) int32_t tensor_data17[48] = { -52157, -270, 8834, -391, 5304, -6175, 1341, 26286, 2128, 30898, -2848, 20142, -6555, -975, 25486, 5419, 232, 15986, 26574, 11944, -55, -189, -102, 13756, -8231, 25218, 46089, 37055, 2911, 1220, -701, 1345, 825, 18835, -7258, 16985, -10837, 18227, -22258, 117826, 23011, 19265, 11097, -2014, 16210, 3533, 1483, -94, };
const TfArray<1, int> tensor_dimension17 = { 1, { 48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.00031695220968686044, 0.00030285629327408969, 0.0001806176733225584, 0.00030946460901759565, 0.00014156718680169433, 9.126934310188517e-05, 0.0008469743188470602, 0.00013175581989344209, 0.00012722202518489212, 0.00015583180356770754, 0.00010005763761000708, 0.00021388847380876541, 0.0002596241538412869, 0.00021530839148908854, 9.908367064781487e-05, 0.00028365937760099769, 0.00022261531557887793, 0.00024590035900473595, 9.0742592874448746e-05, 0.00016200401296373457, 0.00019828438234981149, 0.00019800008158199489, 0.00020109507022425532, 0.00015542145411018282, 0.00015740450180601329, 0.00014527588791679591, 0.00054069375619292259, 8.7536514911334962e-05, 0.00020364744705148041, 0.0006994056748226285, 9.9331140518188477e-05, 0.00016673453501425683, 0.0010597516084089875, 0.00015969251398928463, 0.0001990483287954703, 0.00014716385339852422, 0.00040131513378582895, 0.00013911479618400335, 0.00027058174600824714, 2.0906676581944339e-05, 0.00013790137018077075, 5.7619603467173874e-05, 0.00014879337686579674, 0.0001493534364271909, 0.00014535186346620321, 0.00012857503315899521, 0.00020473089534789324, 0.00011463750706752762, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(16) int8_t tensor_data18[8*1*1*48] = { 
  /* [0][0][][] */ -48,-18,-43,11,4,-22,-8,-3,-116,127,-45,115,122,5,74,-25,-8,-38,10,3,-5,-6,-23,-32,19,-100,17,64,-16,16,14,-40,-10,-78,107,20,-5,-12,-8,-13,111,0,54,-32,-24,19,-20,-18, 
  /* [1][0][][] */ -1,32,127,5,-4,-21,3,-80,26,0,21,7,-19,9,-2,-114,17,-54,7,7,-26,34,28,-36,-16,-10,11,0,13,-4,17,-5,0,11,12,15,-10,-30,64,-57,5,34,-7,27,-13,5,27,-3, 
  /* [2][0][][] */ 6,-50,16,-44,30,26,-6,-30,6,-3,-1,12,-12,55,5,1,-38,127,-23,-35,-15,20,-38,-10,116,3,1,-8,-30,-7,-1,-41,-10,-15,-1,12,-8,-3,-15,6,13,-21,-21,-3,2,24,-25,-37, 
  /* [3][0][][] */ 0,-84,-2,9,5,-7,-6,1,-11,-10,21,20,15,-7,48,3,-11,-23,2,27,-8,24,-19,3,7,49,0,6,-4,5,127,0,12,10,-3,-5,-22,-15,-10,12,-7,5,-9,30,-7,0,0,30, 
  /* [4][0][][] */ -105,9,-1,2,2,-32,1,13,47,-39,26,-17,-35,2,-12,-12,6,9,-2,21,9,-27,19,5,-5,44,3,109,0,5,-5,-30,0,-127,-29,9,5,2,3,0,-51,-8,-12,16,-60,-2,8,5, 
  /* [5][0][][] */ -23,25,23,10,-50,21,-4,44,19,8,9,13,-7,-51,12,32,6,-90,27,1,43,-41,4,30,8,4,-87,-51,-40,-40,27,1,4,-72,3,-67,70,15,-39,13,22,-42,7,5,127,-16,-47,1, 
  /* [6][0][][] */ -30,-27,-14,-11,34,-29,3,-21,-12,-7,33,-23,-15,35,-6,-56,-6,5,2,-25,-36,46,-9,-82,-1,-7,-58,-66,29,42,-21,5,2,-59,-18,70,-71,-49,11,-53,-2,13,14,41,127,-28,38,11, 
  /* [7][0][][] */ 16,31,-76,23,-25,18,-1,57,-13,0,59,-24,10,-35,-2,-6,-19,-127,42,-43,58,39,11,-60,15,-24,21,-2,-13,26,-13,8,2,36,-2,-25,-11,-58,-38,-64,-10,-27,49,54,-29,-14,-4,2, 
};
const TfArray<4, int> tensor_dimension18 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant18_scale = { 8, { 0.019793318584561348, 0.030915712937712669, 0.064559809863567352, 0.069710947573184967, 0.031715638935565948, 0.02215735986828804, 0.032866887748241425, 0.047060567885637283, } };
const TfArray<8, int> quant18_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int32_t tensor_data19[8] = { -37690, 24258, -11177, -13012, 19271, -2785, 30894, 41967, };
const TfArray<1, int> tensor_dimension19 = { 1, { 8 } };
const TfArray<8, float> quant19_scale = { 8, { 0.00046572514111176133, 0.0007274285308085382, 0.0015190544072538614, 0.0016402576584368944, 0.00074625032721087337, 0.00052134966244921088, 0.00077333854278549552, 0.001107307500205934, } };
const TfArray<8, int> quant19_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int8_t tensor_data20[48*1*1*8] = { 
  /* [0][0][][] */ -127,-4,1,71,-31,37,24,-31, 
  /* [1][0][][] */ 29,71,39,10,19,-39,94,127, 
  /* [2][0][][] */ -34,-3,-6,7,-127,-10,9,12, 
  /* [3][0][][] */ 98,-16,-19,-127,-127,19,38,-16, 
  /* [4][0][][] */ -127,35,-5,-18,69,-8,30,9, 
  /* [5][0][][] */ -92,-33,20,-4,-127,5,13,86, 
  /* [6][0][][] */ -7,-127,21,-14,3,-4,3,39, 
  /* [7][0][][] */ -66,1,6,91,127,-29,-35,9, 
  /* [8][0][][] */ 77,-5,7,-127,-2,-27,-40,-30, 
  /* [9][0][][] */ 0,-127,-17,-3,-1,78,-47,89, 
  /* [10][0][][] */ -96,1,4,22,-127,68,65,-17, 
  /* [11][0][][] */ 121,15,37,12,-60,-45,-33,-127, 
  /* [12][0][][] */ -3,18,40,-13,12,-77,127,65, 
  /* [13][0][][] */ 50,-7,-7,-12,127,118,104,-46, 
  /* [14][0][][] */ 127,47,-9,16,-105,-30,-22,-15, 
  /* [15][0][][] */ -12,-127,13,-11,-2,1,7,43, 
  /* [16][0][][] */ -39,-20,0,9,-127,-11,10,7, 
  /* [17][0][][] */ -19,91,-109,7,6,-127,107,-89, 
  /* [18][0][][] */ 127,-30,-47,10,-56,30,8,99, 
  /* [19][0][][] */ 127,-43,-18,6,37,-6,35,9, 
  /* [20][0][][] */ 127,21,-17,125,-1,26,12,-45, 
  /* [21][0][][] */ 5,40,-60,-2,-16,91,-127,-94, 
  /* [22][0][][] */ -127,34,31,-9,-15,-2,-44,-28, 
  /* [23][0][][] */ -44,-54,0,20,-127,67,75,-20, 
  /* [24][0][][] */ 127,-16,-8,-10,-75,-3,3,16, 
  /* [25][0][][] */ 22,-13,-3,-23,127,54,49,-32, 
  /* [26][0][][] */ -1,-89,5,-41,4,-127,82,-56, 
  /* [27][0][][] */ -20,-127,27,-19,0,-54,28,-11, 
  /* [28][0][][] */ -122,43,-13,18,-5,-39,127,95, 
  /* [29][0][][] */ -18,49,19,7,10,39,-106,-127, 
  /* [30][0][][] */ 127,-21,4,17,-82,1,-42,-25, 
  /* [31][0][][] */ 0,-38,73,-30,15,-127,125,73, 
  /* [32][0][][] */ -83,41,10,0,-127,-102,-105,49, 
  /* [33][0][][] */ -26,18,1,24,-127,-59,-45,22, 
  /* [34][0][][] */ 8,-127,50,-9,-11,92,-77,60, 
  /* [35][0][][] */ -25,-49,-127,-9,0,-72,45,-54, 
  /* [36][0][][] */ 4,127,64,6,-9,7,-20,-42, 
  /* [37][0][][] */ -127,36,39,-14,60,-32,-7,-113, 
  /* [38][0][][] */ -127,-15,-51,-8,35,20,43,126, 
  /* [39][0][][] */ 10,-37,77,-1,8,-90,127,91, 
  /* [40][0][][] */ -33,-7,-2,-43,-127,114,115,-40, 
  /* [41][0][][] */ -127,58,12,-64,-79,-87,-93,40, 
  /* [42][0][][] */ -32,-127,-102,-1,-16,56,-103,-71, 
  /* [43][0][][] */ -75,12,-18,-127,105,71,65,4, 
  /* [44][0][][] */ 127,-14,18,-93,28,-33,-4,51, 
  /* [45][0][][] */ -18,-127,-13,-7,-7,-68,74,9, 
  /* [46][0][][] */ 110,-1,1,-25,127,-39,-31,0, 
  /* [47][0][][] */ 127,-6,-15,107,-3,28,16,-35, 
};
const TfArray<4, int> tensor_dimension20 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant20_scale = { 48, { 0.00076095398981124163, 0.0015869541093707085, 0.00055040844017639756, 0.00051564292516559362, 0.0004545555857475847, 0.0005365104298107326, 0.00091230199905112386, 0.00041952737956307828, 0.00078783091157674789, 0.0013848911039531231, 0.001970652723684907, 0.00058164127403870225, 0.00076147192157804966, 0.0013540841173380613, 0.00025151349836960435, 0.00079980079317465425, 0.00054230086971074343, 0.00070761248935014009, 0.0003596534370444715, 0.00055094494018703699, 0.00069992430508136749, 0.00046513864072039723, 0.0006437908741645515, 0.00029854095191694796, 0.00049795524682849646, 0.00052798097021877766, 0.0040367143228650093, 0.00094106554752215743, 0.00038551390753127635, 0.00075675098923966289, 0.00051210011588409543, 0.0004324479668866843, 0.0014084073482081294, 0.00046663233661092818, 0.0014132210053503513, 0.0011606422485783696, 0.0014006857527419925, 0.00048599296133033931, 0.00045768747804686427, 0.0007067887345328927, 0.00029733535484410822, 0.00056719325948506594, 0.00066360726486891508, 0.00043447979260236025, 0.0035553714260458946, 0.0008698573219589889, 0.00073002127464860678, 0.0023806446697562933, } };
const TfArray<48, int> quant20_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int32_t tensor_data21[48] = { 430, 689, 1445, 343, 7217, 11368, 1809, -85, -582, -479, 773, 802, 2530, 874, 21557, 2377, 1360, -880, -197, 2472, -1328, 8383, 8676, 8042, 4849, 283, 2623, 3008, 6939, -479, 7733, 4219, 442, -173, 3967, 2372, -1525, 281, -561, 4050, 894, -318, -720, 104, 827, 2415, 492, 748, };
const TfArray<1, int> tensor_dimension21 = { 1, { 48 } };
const TfArray<48, float> quant21_scale = { 48, { 0.00050172064220532775, 0.001046328223310411, 0.00036290139541961253, 0.00033997942227870226, 0.00029970263130962849, 0.00035373799619264901, 0.00060150906210765243, 0.00027660743216983974, 0.00051944138249382377, 0.0009131017723120749, 0.0012993125710636377, 0.00038349415990523994, 0.00050206208834424615, 0.00089278974337503314, 0.00016583067190367728, 0.00052733352640643716, 0.00035755580756813288, 0.00046655090409331024, 0.00023713069094810635, 0.00036325512337498367, 0.00046148186083883047, 0.00030668036197312176, 0.00042447133455425501, 0.00019683732534758747, 0.00032831737189553678, 0.00034811426303349435, 0.002661531325429678, 0.00062047375831753016, 0.00025418130098842084, 0.00049894943367689848, 0.00033764351974241436, 0.00028512638527899981, 0.00092860672157257795, 0.00030766520649194717, 0.00093178055249154568, 0.00076524750329554081, 0.00092351564671844244, 0.0003204302629455924, 0.0003017675771843642, 0.00046600776840932667, 0.00019604244153015316, 0.00037396815605461597, 0.00043753688805736601, 0.00028646603459492326, 0.0023441668599843979, 0.00057352398289367557, 0.00048132572555914521, 0.0015696330228820443, } };
const TfArray<48, int> quant21_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int8_t tensor_data22[1*3*3*48] = { 
  /* [0][0][][] */ 70,-94,97,69,54,-34,106,-64,58,-89,-81,48,51,-43,-73,-89,101,79,49,78,66,-75,-84,50,-31,-40,-62,-64,-67,61,-63,-114,-12,42,69,64,-66,54,-50,-22,50,-74,59,61,-91,11,75,-32, 82,-98,127,85,-77,-68,-59,-84,96,-104,-64,74,79,-109,-97,92,-39,97,83,127,85,-116,53,71,-51,-77,-67,-80,56,79,-31,-127,-86,80,81,83,-82,82,-83,-15,75,-94,83,89,-73,-127,94,-101, 35,-46,70,36,19,-40,-49,-38,43,-31,5,34,29,-79,-56,-2,-54,37,34,69,33,-55,31,26,-28,-45,-43,-22,32,31,87,-89,-84,44,35,33,-30,39,-36,-10,42,-40,35,43,-3,-9,36,-70, 
  /* [0][1][][] */ 93,-112,-42,93,56,-82,127,-89,87,-114,-71,82,83,-108,-13,-127,127,109,74,-37,84,107,-127,73,73,-75,-91,-99,-127,87,-70,-8,-89,72,106,96,-86,79,-81,89,84,-101,88,90,-88,107,94,-91, 127,-127,-65,127,-127,-127,-93,-127,127,-127,-127,127,127,-127,-22,95,-66,127,127,-50,127,127,69,127,127,-127,-127,-127,54,127,-29,17,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-11,127,-127, 64,-78,-32,65,38,-61,-51,-61,56,-42,-61,57,47,-53,-17,9,-63,50,57,-29,57,65,51,65,65,-65,-61,-44,37,56,127,15,-61,69,49,49,-48,61,-59,56,61,-58,54,61,-62,-67,58,-55, 
  /* [0][2][][] */ 45,-50,-45,50,27,-52,65,-41,41,-72,-4,39,55,-71,82,-79,73,51,33,-30,26,-12,-77,30,-23,-44,-49,-49,-74,31,-41,91,-73,37,47,42,-26,38,-43,-86,47,-51,41,44,-22,16,40,-71, 73,-73,-48,79,-56,-63,-73,-67,50,-78,-68,61,73,-49,127,32,-48,60,60,-43,55,-19,42,67,-48,-65,-78,-61,32,61,-24,119,-53,64,56,57,-49,62,-67,-104,69,-68,60,62,-84,50,63,-52, 42,-40,-27,46,29,-19,-17,-33,15,-27,-51,27,30,5,66,24,-35,22,28,-32,29,0,40,42,-24,-28,-48,-24,34,34,62,67,2,32,15,21,-22,31,-30,-55,28,-33,26,29,-63,9,31,-6, 
};
const TfArray<4, int> tensor_dimension22 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.0036293319426476955, 0.0016673809150233865, 0.0064290794543921947, 0.0020219474099576473, 0.0073774373158812523, 0.0028751506470143795, 0.0061756856739521027, 0.0056647234596312046, 0.0031144728418439627, 0.0018443913431838155, 0.0021633252035826445, 0.0036627245135605335, 0.0020279542077332735, 0.0015767879085615277, 0.0063448580913245678, 0.007834702730178833, 0.0072760568000376225, 0.0032558862585574389, 0.004232452716678381, 0.0066029033623635769, 0.0031520547345280647, 0.0081818448379635811, 0.0039201457984745502, 0.0051190662197768688, 0.0033421919215470552, 0.0048895338550209999, 0.0012979047605767846, 0.0030997837893664837, 0.0050582974217832088, 0.0052127032540738583, 0.0049083828926086426, 0.0059970957227051258, 0.0029150508344173431, 0.006526540033519268, 0.0013952129520475864, 0.0024659654591232538, 0.0061482680030167103, 0.0042647668160498142, 0.0047742179594933987, 0.0039337193593382835, 0.0049337558448314667, 0.0051959631964564323, 0.0037760580889880657, 0.004068146925419569, 0.0013469330733641982, 0.0061176987364888191, 0.0056444420479238033, 0.0012931805104017258, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 3 };
const ALIGN(16) int32_t tensor_data23[48] = { 1106, 34904, -1053, 50002, 2954, 126411, -1904, 44306, 4565, 30409, 27052, 4283, -2550, 32151, -184, -2217, -298, 805, 3450, -1501, 676, -3361, 653, -19523, -6109, 39720, 126255, 98551, 2059, 3933, -1653, 995, 25775, -418, 21235, -1269, 39970, 1411, 51378, 2139, -93, 49939, 132, 1502, 43136, -160, -1047, 44775, };
const TfArray<1, int> tensor_dimension23 = { 1, { 48 } };
const TfArray<48, float> quant23_scale = { 48, { 8.5396044596564025e-05, 3.9232494600582868e-05, 0.00015127245569601655, 4.7575234930263832e-05, 0.00017358676996082067, 6.7650602431967854e-05, 0.00014531025954056531, 0.0001332876126980409, 7.328171341214329e-05, 4.3397445551818237e-05, 5.0901770009659231e-05, 8.618175343144685e-05, 4.7716570406919345e-05, 3.710089367814362e-05, 0.00014929077588021755, 0.00018434594676364213, 0.00017120133270509541, 7.6609088864643127e-05, 9.9587123258970678e-05, 0.00015536243154201657, 7.4165996920783073e-05, 0.00019251399498898536, 9.2238726210780442e-05, 0.00012044861796312034, 7.8639808634761721e-05, 0.00011504785652505234, 3.0538936698576435e-05, 7.2936090873554349e-05, 0.00011901876860065386, 0.00012265185068827122, 0.00011549136252142489, 0.00014110813208390027, 6.858943379484117e-05, 0.0001535656483611092, 3.282854231656529e-05, 5.8022716984851286e-05, 0.00014466512948274612, 0.00010034745355369523, 0.00011233454279135913, 9.2558104370255023e-05, 0.00011608837667154148, 0.00012225795944686979, 8.8848428276833147e-05, 9.5721108664292842e-05, 3.1692543416284025e-05, 0.00014394585741683841, 0.00013281039719004184, 3.0427776437136345e-05, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(16) int8_t tensor_data24[16*1*1*48] = { 
  /* [0][0][][] */ -15,1,-22,8,23,-2,1,103,-53,16,40,-9,16,-14,-17,14,21,-12,-10,-2,63,-9,22,126,-19,87,-5,-12,25,-18,20,-24,-13,50,19,-48,17,45,19,-25,-108,-20,22,42,32,28,-127,-52, 
  /* [1][0][][] */ -33,-9,17,16,-29,13,-2,51,-48,-35,5,-36,-23,-15,4,-5,-27,111,-9,16,12,8,-29,-13,28,-42,15,20,-24,-76,-31,18,-16,-3,30,1,-5,-39,-1,29,-15,-28,127,11,7,-3,25,-15, 
  /* [2][0][][] */ -22,-3,-15,-37,2,-69,8,-21,1,9,14,26,15,16,-11,6,-4,-21,-24,-11,-4,-4,-1,-127,-12,77,-17,2,-1,-22,-5,-9,-9,56,15,-1,25,7,24,6,-40,3,-13,-8,-3,-9,18,5, 
  /* [3][0][][] */ -7,30,2,-30,0,3,4,-2,-20,-2,1,39,-127,5,-4,-2,0,3,-17,-1,-29,10,6,17,-6,-10,5,23,-9,19,6,17,4,2,15,20,-10,25,43,9,11,7,22,-31,9,-5,8,16, 
  /* [4][0][][] */ 39,-33,7,9,20,25,21,-22,-31,1,-18,-19,-1,10,5,17,19,-9,-83,4,-6,14,12,78,0,-28,4,51,10,-78,22,7,13,-35,35,-127,17,32,-6,25,-15,18,11,-22,-11,-23,8,-2, 
  /* [5][0][][] */ 31,2,-19,63,4,-13,11,23,6,-10,37,10,5,54,8,4,-25,24,33,6,12,1,3,-22,8,-51,2,-25,-6,-10,5,7,69,-127,8,35,-14,-14,9,12,-89,59,25,-4,-8,-1,-99,-14, 
  /* [6][0][][] */ 23,-2,9,4,-14,-2,1,-12,-2,6,0,4,-19,9,4,3,-3,-13,127,10,4,14,13,-37,7,3,28,-11,-12,-4,-4,5,1,-12,32,-38,2,-46,71,15,-1,-7,-3,6,-11,-1,6,-10, 
  /* [7][0][][] */ -49,-10,-12,32,-13,83,-8,50,-4,34,-3,127,75,-1,-12,-9,-8,-29,-11,-23,-33,-3,-23,66,-3,-35,-50,-28,-15,-14,-19,-14,7,-3,-22,1,13,-63,102,-6,22,27,-62,-63,22,-12,-1,10, 
  /* [8][0][][] */ -53,-55,7,7,-2,1,-2,37,0,-75,4,45,55,4,0,10,-12,67,-29,9,-48,25,-7,-10,3,5,1,44,-10,114,-12,19,-4,7,-23,-127,-121,66,37,28,23,0,110,-28,2,30,24,27, 
  /* [9][0][][] */ -25,2,-3,33,23,-33,-2,0,60,-44,10,59,-51,2,18,3,-8,22,-32,-21,54,6,-10,-13,6,9,42,-29,10,7,15,0,-3,22,70,-97,-7,-127,-93,12,-25,28,53,6,1,10,-10,-45, 
  /* [10][0][][] */ -20,-7,-38,-127,38,87,5,-11,-6,37,25,5,43,-45,-33,16,26,-44,48,-33,26,-25,33,46,-50,-100,9,-27,50,32,45,-49,-28,-82,21,-11,15,-42,7,-26,-37,-63,-13,8,17,9,12,-31, 
  /* [11][0][][] */ 0,61,-13,71,43,-82,-92,-22,4,66,-22,-1,-14,59,2,-96,21,48,6,-7,-65,-119,13,3,22,-49,15,-23,67,-51,31,-100,53,-23,-40,-107,113,24,4,-127,-4,73,124,-82,-9,-64,42,30, 
  /* [12][0][][] */ 127,-3,-17,16,6,18,6,106,21,-15,-58,-21,3,15,-11,1,-10,11,0,-6,6,-4,6,21,-3,14,-10,1,-5,18,-3,5,0,-65,-13,13,-22,-11,-30,-3,-15,-83,3,-127,-59,-8,85,-8, 
  /* [13][0][][] */ 10,1,0,6,9,-10,3,1,-1,4,5,23,-3,2,5,1,7,3,12,7,15,-11,9,-1,3,1,18,127,12,-6,7,-3,6,2,-39,23,10,-8,5,-13,-12,-1,0,3,-3,-2,-6,-17, 
  /* [14][0][][] */ 59,-29,51,-66,51,29,42,-99,-51,-55,-2,121,-67,-8,61,16,59,26,-50,65,22,11,78,-17,21,55,-31,-117,30,-36,55,52,-7,70,-127,-50,-44,53,92,-9,-37,12,48,4,-4,5,15,-22, 
  /* [15][0][][] */ -11,-48,-74,-40,55,27,77,-50,-16,24,-14,-38,83,22,-106,70,62,51,77,-87,-104,-29,58,-17,-97,48,33,59,55,45,47,-45,22,61,101,127,-16,-113,-4,-41,90,60,112,-52,-5,-34,-23,70, 
};
const TfArray<4, int> tensor_dimension24 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant24_scale = { 16, { 0.034538481384515762, 0.037805575877428055, 0.043088056147098541, 0.04614441841840744, 0.035899024456739426, 0.052658487111330032, 0.039605345577001572, 0.023058788850903511, 0.029483640566468239, 0.023226127028465271, 0.040190163999795914, 0.021937521174550056, 0.049956873059272766, 0.053357310593128204, 0.022281980141997337, 0.025298649445176125, } };
const TfArray<16, int> quant24_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int32_t tensor_data25[16] = { -37711, 2106, 2504, -9850, -266, -7246, -12174, -44727, 1908, 22455, 33011, -9616, -1901, -23031, 39091, -44603, };
const TfArray<1, int> tensor_dimension25 = { 1, { 16 } };
const TfArray<16, float> quant25_scale = { 16, { 0.00081267015775665641, 0.00088954297825694084, 0.0010138365905731916, 0.0010857509914785624, 0.00084468291606754065, 0.0012390232877805829, 0.00093189050676301122, 0.00054255971917882562, 0.00069373275619000196, 0.00054649711819365621, 0.00094565091421827674, 0.00051617698045447469, 0.0011754558654502034, 0.0012554661370813847, 0.0005242818733677268, 0.00059526233235374093, } };
const TfArray<16, int> quant25_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int8_t tensor_data26[96*1*1*16] = { 
  /* [0][0][][] */ 42,-16,127,95,89,-38,16,-41,106,-31,-48,-70,52,105,-25,-74, 
  /* [1][0][][] */ 22,82,-3,5,92,-3,1,16,43,83,-39,127,3,-17,80,-78, 
  /* [2][0][][] */ 8,-69,8,12,-54,47,-69,83,-53,-111,15,85,-29,-127,87,-118, 
  /* [3][0][][] */ 127,114,-9,30,-121,-8,-55,-20,3,-2,107,-72,-55,93,-36,-31, 
  /* [4][0][][] */ 4,-14,26,4,-25,17,-23,35,-68,-33,-8,-8,-1,-127,26,3, 
  /* [5][0][][] */ 118,-38,-23,8,3,-115,-25,18,-21,22,-127,6,28,-5,-16,20, 
  /* [6][0][][] */ -127,-81,2,90,-53,-1,-32,43,-77,-79,-30,-30,50,34,16,80, 
  /* [7][0][][] */ -8,14,-63,31,38,-127,-21,40,7,-29,13,0,2,20,-27,18, 
  /* [8][0][][] */ 29,-44,-28,-25,-16,28,-47,-60,-3,24,-89,-3,-127,-13,16,41, 
  /* [9][0][][] */ 18,-53,65,127,-1,12,-4,-71,127,-69,16,-31,7,31,-50,9, 
  /* [10][0][][] */ -105,-40,13,-64,107,49,53,84,117,-71,-91,38,71,-102,-127,97, 
  /* [11][0][][] */ 37,-12,-127,22,55,30,-29,34,-12,-39,-15,-7,-3,23,-50,4, 
  /* [12][0][][] */ 111,-41,18,-3,-13,-48,-66,-29,47,12,-127,-3,-47,-29,5,75, 
  /* [13][0][][] */ 37,-53,18,-61,72,-19,-79,-127,7,-54,-6,10,16,-8,16,7, 
  /* [14][0][][] */ -60,39,-92,-52,88,-127,51,-68,59,49,-9,-92,48,110,-21,43, 
  /* [15][0][][] */ 11,-13,51,29,48,-35,-36,-25,12,-69,-51,-26,-127,-35,2,46, 
  /* [16][0][][] */ -119,42,11,5,-6,100,34,75,-6,17,127,13,-4,7,24,-37, 
  /* [17][0][][] */ -9,-8,-43,-31,-41,7,39,86,-25,127,-26,12,-12,78,66,-4, 
  /* [18][0][][] */ -21,127,-67,-5,0,3,60,-79,24,114,-50,119,18,-56,37,-87, 
  /* [19][0][][] */ 3,-11,35,20,8,47,-6,14,11,9,-42,-2,-127,4,-10,32, 
  /* [20][0][][] */ 92,-59,-8,-76,-25,27,26,-84,-45,26,-127,-47,29,6,54,6, 
  /* [21][0][][] */ 43,-11,127,34,-30,53,30,1,6,28,-15,-2,-12,64,3,1, 
  /* [22][0][][] */ 27,12,28,13,-9,14,19,127,19,4,10,39,3,48,32,12, 
  /* [23][0][][] */ -33,19,-119,19,26,-127,7,38,-5,-29,-23,-30,-91,19,-1,29, 
  /* [24][0][][] */ 24,-55,4,-59,59,4,-30,-18,27,27,64,85,-40,84,127,31, 
  /* [25][0][][] */ -127,-109,-54,-1,5,4,22,-26,-71,3,-82,8,28,31,35,63, 
  /* [26][0][][] */ 12,1,52,-13,-10,14,-28,60,-76,-48,2,18,11,-127,29,-7, 
  /* [27][0][][] */ -92,51,-37,43,43,-29,-2,42,35,-35,127,32,-20,21,-19,-38, 
  /* [28][0][][] */ -18,-3,23,37,2,3,8,77,21,18,-29,-1,-127,-6,-16,39, 
  /* [29][0][][] */ -13,73,31,-38,32,-12,22,-28,-127,47,-38,2,10,19,-77,15, 
  /* [30][0][][] */ -6,-10,-127,-21,32,-71,-5,17,-10,-22,-8,-20,-50,-14,8,6, 
  /* [31][0][][] */ 127,-40,-124,8,37,3,-47,68,-22,-3,-83,-40,29,-10,-84,40, 
  /* [32][0][][] */ -115,43,35,68,34,84,27,32,34,11,127,0,-41,22,-21,-40, 
  /* [33][0][][] */ 4,-15,127,-24,-67,25,0,-44,2,5,-4,22,1,19,46,27, 
  /* [34][0][][] */ -36,-13,-85,-112,29,40,12,-26,-26,-66,-42,-127,1,13,40,-4, 
  /* [35][0][][] */ 2,-31,42,50,56,-23,24,-3,-109,60,-4,37,1,127,-33,-39, 
  /* [36][0][][] */ -121,45,-40,-6,-28,26,54,99,4,44,127,-14,14,3,37,-27, 
  /* [37][0][][] */ -46,16,127,-38,-77,-70,25,-43,11,23,-10,3,-8,-71,70,5, 
  /* [38][0][][] */ 27,-10,-11,29,45,-56,-54,25,-17,-9,61,-8,127,31,-18,7, 
  /* [39][0][][] */ -18,-34,-1,-46,-55,-74,65,127,-27,-16,5,-51,4,48,73,66, 
  /* [40][0][][] */ 65,6,1,-17,-3,100,-18,8,12,-3,10,9,127,21,-30,-20, 
  /* [41][0][][] */ 4,-2,-34,-127,34,-5,-28,-68,-15,-36,2,-35,-4,-9,-18,29, 
  /* [42][0][][] */ 35,49,15,127,-122,0,-90,24,-62,-66,116,-92,-7,127,-18,16, 
  /* [43][0][][] */ 18,101,-6,127,34,15,23,-56,-40,54,15,33,3,-25,25,17, 
  /* [44][0][][] */ -13,-30,-127,19,49,73,-40,60,-14,-24,40,-26,9,-30,-48,1, 
  /* [45][0][][] */ -10,11,-6,-127,-44,7,39,-8,-4,15,-9,11,12,-111,52,-32, 
  /* [46][0][][] */ 0,37,44,-17,20,18,-49,40,-3,-35,-30,14,0,127,37,-19, 
  /* [47][0][][] */ 18,-25,28,-35,-34,18,-73,57,-5,-38,12,42,5,-127,43,6, 
  /* [48][0][][] */ 5,-3,8,-127,-13,-16,-6,8,10,-27,16,-19,8,42,-6,59, 
  /* [49][0][][] */ 34,-42,-1,125,89,9,-1,58,-67,13,40,38,-7,45,127,-12, 
  /* [50][0][][] */ -17,-19,51,-36,-8,127,-32,-80,53,-27,122,19,100,-23,-6,-56, 
  /* [51][0][][] */ 14,51,24,21,26,0,-41,22,40,-4,8,127,21,37,31,-69, 
  /* [52][0][][] */ -21,55,126,4,14,-31,17,-43,-21,-2,19,42,7,82,-127,-15, 
  /* [53][0][][] */ -3,-29,-53,-127,-47,-3,21,-29,-7,47,16,0,27,-27,61,14, 
  /* [54][0][][] */ 12,3,-30,-59,19,9,-5,17,52,-15,7,-29,-29,127,25,35, 
  /* [55][0][][] */ -14,-21,-32,0,19,-41,-23,-127,13,-85,-20,0,-30,-62,-51,-21, 
  /* [56][0][][] */ 44,44,33,64,5,-23,10,127,26,-28,-4,-33,82,-14,-50,33, 
  /* [57][0][][] */ 85,-4,127,-19,-56,-53,-9,-40,18,21,-109,32,48,-31,36,17, 
  /* [58][0][][] */ 112,92,38,103,-127,-21,32,68,13,48,99,-26,-59,-47,-13,-78, 
  /* [59][0][][] */ 127,-52,-10,-6,-23,-19,-8,13,-39,10,-119,-18,7,0,8,25, 
  /* [60][0][][] */ -127,39,2,-9,11,7,11,24,-7,6,79,-11,-40,11,19,-16, 
  /* [61][0][][] */ -103,32,28,3,34,11,-52,-56,127,-81,44,-33,58,-21,-68,-69, 
  /* [62][0][][] */ -19,-48,-127,56,78,102,-7,86,17,-62,29,-19,-85,4,-94,-6, 
  /* [63][0][][] */ -42,9,127,-35,-55,-56,29,-31,15,18,12,21,-23,-38,81,20, 
  /* [64][0][][] */ 5,60,-12,24,59,7,71,-127,-18,93,3,-14,-45,-99,-26,40, 
  /* [65][0][][] */ -6,17,14,-13,73,22,0,-127,-16,-67,-29,-50,-14,-33,50,13, 
  /* [66][0][][] */ -127,-2,-21,4,-46,21,15,-36,-64,-40,-68,43,50,16,50,81, 
  /* [67][0][][] */ -3,-57,-8,127,8,8,-8,44,86,38,6,-37,-10,-44,-82,-25, 
  /* [68][0][][] */ 7,-7,-26,127,-77,-22,10,-35,-50,46,19,-39,-16,-88,-4,-40, 
  /* [69][0][][] */ 108,90,25,126,61,-22,67,-127,31,117,25,42,29,-14,74,4, 
  /* [70][0][][] */ 8,-53,7,-87,114,-44,23,7,88,-49,88,-52,11,87,51,127, 
  /* [71][0][][] */ 13,46,12,83,49,-127,-45,93,33,-99,11,9,18,-46,-64,37, 
  /* [72][0][][] */ -127,-80,-16,39,24,33,-24,18,-60,-35,-96,38,62,29,9,102, 
  /* [73][0][][] */ -13,-11,-18,59,9,-17,3,-11,73,18,-8,5,20,127,-64,-33, 
  /* [74][0][][] */ 91,-62,22,-26,-38,-28,36,-21,-34,-2,-121,23,-127,-11,46,47, 
  /* [75][0][][] */ -31,-22,-15,127,-34,4,-9,-26,-78,12,-8,-33,3,-55,-18,-37, 
  /* [76][0][][] */ 2,-15,-8,38,31,3,-17,-127,11,-125,13,18,-29,-24,37,-34, 
  /* [77][0][][] */ 127,-45,28,60,-38,4,-35,-11,48,-10,-40,43,40,3,-49,28, 
  /* [78][0][][] */ -14,-16,51,5,5,-9,-77,32,46,-36,-48,-37,32,127,64,-19, 
  /* [79][0][][] */ -9,20,40,16,41,58,-47,-54,20,-41,62,-18,127,-17,-27,-36, 
  /* [80][0][][] */ -115,-125,-101,127,3,36,36,1,-95,27,-111,-1,85,-117,6,72, 
  /* [81][0][][] */ 50,-2,-62,31,127,86,-40,-46,-6,-104,-21,-74,-33,-15,-87,15, 
  /* [82][0][][] */ 97,127,-9,32,-118,-10,-86,-26,-52,-5,123,-57,-50,91,-4,-41, 
  /* [83][0][][] */ 127,39,10,-28,4,-12,-5,32,38,12,91,-37,-53,-32,-22,-73, 
  /* [84][0][][] */ 16,-73,-59,-34,53,21,-12,-127,-26,-68,30,21,-23,7,-5,-7, 
  /* [85][0][][] */ -18,6,-41,-46,-3,-3,72,88,-22,127,-11,-32,18,42,50,-11, 
  /* [86][0][][] */ 88,-23,-3,-18,-5,-38,-8,-26,-17,-7,-127,2,25,19,-15,33, 
  /* [87][0][][] */ -15,31,28,-47,-16,74,-34,49,-11,-29,36,15,17,-127,6,18, 
  /* [88][0][][] */ -1,-16,-81,-34,66,1,-43,-127,16,-38,-20,-23,-26,7,25,-35, 
  /* [89][0][][] */ 11,-6,44,-127,35,5,-65,102,74,-90,57,23,0,36,18,60, 
  /* [90][0][][] */ -21,1,-23,42,68,-16,127,-85,109,121,-28,23,41,27,1,-40, 
  /* [91][0][][] */ 44,-14,-35,-19,6,-127,-9,-11,-13,3,-52,-8,29,-10,24,34, 
  /* [92][0][][] */ 33,9,127,66,49,28,7,50,-9,32,-81,33,13,106,5,-7, 
  /* [93][0][][] */ 127,-46,-52,-29,-32,-57,18,30,-42,36,-110,-3,7,17,15,59, 
  /* [94][0][][] */ 27,-21,38,86,123,-33,-23,56,5,-19,-2,58,-9,127,-31,-84, 
  /* [95][0][][] */ -126,48,47,39,22,44,22,7,16,6,127,4,-27,44,-8,-34, 
};
const TfArray<4, int> tensor_dimension26 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant26_scale = { 96, { 0.00060356786707416177, 0.00079104263568297029, 0.00044773376430384815, 0.0028565963730216026, 0.0010044235968962312, 0.00059880997287109494, 0.00062525528483092785, 0.0017991442000493407, 0.00087395927403122187, 0.00038516626227647066, 0.00078578438842669129, 0.001415683189406991, 0.0014263888588175178, 0.00049040676094591618, 0.00064751924946904182, 0.0014783290680497885, 0.00091982207959517837, 0.00055000971769914031, 0.00064713368192315102, 0.0021682023070752621, 0.0011177533306181431, 0.00066401669755578041, 0.00098558224271982908, 0.0007749251089990139, 0.00070844899164512753, 0.0013098681811243296, 0.00096714810933917761, 0.00056463020155206323, 0.0020147007890045643, 0.0010559608926996589, 0.00086839613504707813, 0.00054679909953847528, 0.00040673115290701389, 0.0018338472582399845, 0.00070019764825701714, 0.0014079196844249964, 0.00047347502550110221, 0.0010530573781579733, 0.0014703650958836079, 0.00067097146529704332, 0.0023433717433363199, 0.00051221746252849698, 0.00044616148807108402, 0.0006211685249581933, 0.0010616451036185026, 0.0010068969568237662, 0.00078118318924680352, 0.0008652391261421144, 0.0010037830797955394, 0.00078219856368377805, 0.0013385257916525006, 0.0029644842725247145, 0.00050741172162815928, 0.00081230018986389041, 0.00079855945659801364, 0.00042615033453330398, 0.0011075513903051615, 0.00076528562931343913, 0.00067508738720789552, 0.0013240915723145008, 0.00053051958093419671, 0.00064569374080747366, 0.0012918894644826651, 0.001313842018134892, 0.00057436601491644979, 0.00089097191812470555, 0.0011159708956256509, 0.0013811293756589293, 0.00038535127532668412, 0.00052826921455562115, 0.0005767791299149394, 0.00090754736447706819, 0.00088120903819799423, 0.0016919850604608655, 0.00072454131441190839, 0.0010454262373968959, 0.00030735766631551087, 0.0011779810301959515, 0.00038510427111759782, 0.0014679111773148179, 0.00053367385407909751, 0.0010994236217811704, 0.00067253992892801762, 0.0014585833996534348, 0.00062106765108183026, 0.00088294397573918104, 0.00085030973423272371, 0.0010489552514627576, 0.00048874982167035341, 0.0011845940025523305, 0.00056623405544087291, 0.0016320102149620652, 0.00043124621151946485, 0.00042145355837419629, 0.00099812517873942852, 0.00072140031261369586, } };
const TfArray<96, int> quant26_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int32_t tensor_data27[96] = { 12621, 1240, 9022, -580, 4703, 4650, 14679, 5721, -1672, 13744, 5357, 1716, 5658, 28772, -383, -1299, 7065, 12408, 1976, -155, -770, 11144, 4536, 2974, 7244, 4672, 4330, 4746, 74, -29, 4934, 10163, 14189, 1734, 7187, -674, 14103, 7410, 930, 4176, 612, 10795, 14073, 3705, 3081, 9544, 10633, 4975, 4701, 3237, 302, -643, 15468, 5732, 8564, 12566, -299, 6728, 3485, 3620, 9243, 6333, 2418, 6190, 5474, 3768, 5065, -752, 20625, 6465, 10215, -1475, -1201, 2252, 1722, 3630, 22729, 11178, 12777, -2483, 6038, -5622, -1648, 499, 7482, 5226, 5656, 3827, 10026, 3925, 7304, 3070, 14581, 18981, -8659, 13309, };
const TfArray<1, int> tensor_dimension27 = { 1, { 96 } };
const TfArray<96, float> quant27_scale = { 96, { 0.00020557531388476491, 0.00026942926342599094, 0.00015249819261953235, 0.00097295717569068074, 0.00034210685407742858, 0.00020395476894918829, 0.00021296205522958189, 0.00061278883367776871, 0.00029767066007480025, 0.00013118769857101142, 0.00026763830101117492, 0.00048218193114735186, 0.00048582829185761511, 0.0001670326164457947, 0.00022054516011849046, 0.00050351914251223207, 0.00031329155899584293, 0.00018733339675236493, 0.00022041384363546968, 0.00073849008185788989, 0.00038070697337388992, 0.00022616419300902635, 0.0003356894594617188, 0.00026393961161375046, 0.00024129783560056239, 0.00044614131911657751, 0.00032941080280579627, 0.00019231313490308821, 0.00068620743695646524, 0.00035966045106761158, 0.00029577585519291461, 0.00018623986397869885, 0.00013853269047103822, 0.00062460865592584014, 0.00023848743876442313, 0.00047953767352737486, 0.00016126567788887769, 0.00035867150290869176, 0.00050080660730600357, 0.00022853299742564559, 0.00079815281787887216, 0.00017446135461796075, 0.00015196268213912845, 0.00021157010633032769, 0.00036159649607725441, 0.00034294926444999874, 0.00026607111794874072, 0.00029470058507286012, 0.0003418886917643249, 0.00026641695876605809, 0.00045590210356749594, 0.0010097038466483355, 0.00017282451153732836, 0.00027666956884786487, 0.00027198946918360889, 0.00014514687063638121, 0.00037723217974416912, 0.00026065640849992633, 0.00022993487073108554, 0.00045098579721525311, 0.00018069506040774286, 0.00021992340043652803, 0.00044001775677315891, 0.00044749479275196791, 0.00019562915258575231, 0.00030346517451107502, 0.00038009986747056246, 0.00047041289508342743, 0.00013125070836395025, 0.00017992858192883432, 0.0001964510593097657, 0.00030911079375073314, 0.00030013994546607137, 0.00057629036018624902, 0.00024677888723090291, 0.0003560723562259227, 0.00010468607069924474, 0.00040122051723301411, 0.00013116658374201506, 0.00049997080350294709, 0.00018176939920522273, 0.00037446385249495506, 0.00022906721278559417, 0.00049679377116262913, 0.00021153574925847352, 0.00030073086963966489, 0.00028961562202312052, 0.00035727431531995535, 0.00016646826406940818, 0.00040347292087972164, 0.0001928594138007611, 0.00055586296366527677, 0.00014688253577332944, 0.00014354714949149638, 0.00033996161073446274, 0.00024570905952714384, } };
const TfArray<96, int> quant27_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int8_t tensor_data28[1*3*3*96] = { 
  /* [0][0][][] */ -17,7,-20,106,-18,23,-62,-52,18,-6,98,-8,4,-8,-4,58,5,18,-34,3,74,1,32,-35,1,18,42,47,22,13,24,48,-7,27,9,-16,4,49,-59,-26,18,10,28,17,-84,-58,25,-5,-12,-20,-8,-6,49,5,-9,2,-2,-35,26,-31,26,-4,127,27,-14,-10,11,-55,65,36,3,-8,79,-32,69,4,16,-127,28,65,-1,15,127,-14,37,29,-29,-19,36,-5,-14,79,0,20,-3,13, -48,12,-8,10,52,-7,-10,-127,40,14,-127,-4,-17,-12,4,96,19,-30,-14,-16,76,-95,127,26,-62,-30,-105,-16,28,34,-50,18,120,11,-12,-1,-24,127,-65,-127,8,-18,-29,13,47,-127,127,-44,-78,48,50,7,39,-64,31,57,38,41,-104,83,127,35,4,-20,43,-37,-97,-3,37,-31,-19,48,-49,-47,105,-4,-30,-61,-33,64,-68,62,-15,9,-11,48,54,-40,-26,55,-13,69,-127,-31,23,-127, 0,-5,-23,-76,7,19,38,22,-3,-1,4,62,0,-12,-11,7,-12,18,-15,17,6,24,24,-31,1,-31,11,12,-7,4,45,-79,45,16,10,-23,11,4,-32,-20,7,3,-15,7,23,-30,22,0,6,-8,6,-5,4,5,-5,9,-6,44,4,-3,10,-21,3,-17,-27,-16,28,-53,-107,-8,40,-18,-127,-22,-10,16,10,-11,6,12,-15,22,-34,-3,-40,20,26,36,-23,-16,25,-11,19,7,-2,-46, 
  /* [0][1][][] */ -41,60,-18,38,-86,-16,-11,-43,25,97,-45,-21,-30,-25,-6,64,127,-24,-93,-14,58,-127,-29,16,-37,-47,-127,-5,39,35,-49,28,-127,-75,-59,3,64,-3,-51,47,-19,87,1,-2,34,-52,-12,-32,127,44,-3,21,45,10,-36,-17,31,10,-127,127,-36,-88,21,127,-60,-35,-84,125,-38,127,-17,53,-36,-55,38,8,-36,-70,127,48,127,35,5,-1,127,29,-94,47,-37,-35,-102,38,96,102,28,-58, 127,127,127,127,-47,-127,127,22,127,-127,16,-127,-107,127,127,127,-16,-127,-64,-127,127,23,-67,127,127,127,-55,-127,127,127,-127,127,-10,-127,-127,127,-127,-44,92,109,-127,-127,127,127,127,-118,-108,127,-14,127,-127,-127,-127,127,127,-127,127,-127,-44,40,-104,-28,-71,-67,127,127,-70,127,127,-108,-127,127,-42,127,-127,-127,-127,125,-75,127,-44,127,79,127,-36,-127,-24,-105,-127,-125,-23,-127,-22,-127,-127,118, -25,65,-38,1,127,70,-22,48,5,25,-12,-5,-27,-30,-14,-8,-104,-21,-127,37,30,78,-12,-114,-34,-41,124,71,10,34,73,8,126,-47,127,-4,54,5,-95,14,37,23,-24,1,-22,-51,-12,-43,81,15,-11,40,-6,-3,-74,-13,25,20,126,-90,2,127,0,-37,-112,-27,-74,99,14,-17,110,25,-19,-55,12,46,-29,-8,-42,-3,-47,8,46,24,-88,34,127,-46,33,-22,127,-11,-112,34,33,20, 
  /* [0][2][][] */ -4,-38,-21,-61,-4,14,39,32,-3,11,-20,52,25,-35,-7,8,41,3,11,20,-10,28,-17,-25,1,-23,10,2,-9,-7,50,-75,-36,67,-30,-26,30,-35,-61,16,9,10,-34,21,12,-79,-12,-1,-10,6,18,-8,8,1,-22,6,-2,43,-52,35,-6,-10,5,17,-5,-9,21,-54,-58,11,-19,-13,-117,-32,1,17,14,-11,56,17,22,22,-38,15,13,25,-20,9,5,26,22,-7,21,40,-7,-28, -27,-9,-27,23,-46,71,-24,65,6,-5,54,-13,127,-7,-18,-21,0,-39,-56,23,-22,77,-45,-109,-48,-47,103,69,13,43,54,-3,-123,64,-16,-24,-28,-26,-127,-5,45,-13,-15,38,-27,-45,-19,-48,-61,28,69,25,-11,-80,31,52,17,25,75,-55,21,-57,-9,1,20,-26,-127,-56,-12,-27,-63,24,37,-46,-29,-7,-45,24,-57,0,51,33,19,11,6,62,-93,127,16,127,-31,-19,114,-21,46,83, -10,-34,-26,28,12,64,-43,13,6,-6,0,13,12,-50,-10,-15,-45,-5,18,19,-25,6,-21,5,-4,19,-3,50,-2,-6,34,29,19,42,18,-22,-6,-26,-30,7,12,-12,21,10,-73,-30,-13,4,-2,-15,0,-4,-9,9,-17,-4,-1,-49,12,-29,-21,51,10,-29,-10,-2,34,-56,45,6,51,-22,31,-55,-19,21,10,11,-5,21,-31,30,86,-14,-17,54,38,-8,110,12,2,-20,10,-23,-7,-50, 
};
const TfArray<4, int> tensor_dimension28 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant28_scale = { 96, { 0.0070030619390308857, 0.0043487632647156715, 0.01080591231584549, 0.0017992062494158745, 0.0068589388392865658, 0.0067738555371761322, 0.012460364960134029, 0.0032051336020231247, 0.0051928777247667313, 0.014021063223481178, 0.0064950515516102314, 0.014264453202486038, 0.0039096781983971596, 0.019347827881574631, 0.0072193332016468048, 0.0064124912023544312, 0.0041654817759990692, 0.013261687941849232, 0.0025022509507834911, 0.0081085115671157837, 0.0018496423726901412, 0.0077225738205015659, 0.0058097532019019127, 0.016180770471692085, 0.0085161300376057625, 0.0098608359694480896, 0.0061941258609294891, 0.0082479733973741531, 0.0046473122201859951, 0.0045655723661184311, 0.0063871736638247967, 0.0074948896653950214, 0.0053147268481552601, 0.0056416657753288746, 0.0079603102058172226, 0.0059115043841302395, 0.014277762733399868, 0.0049479077570140362, 0.0024460710119456053, 0.0058781313709914684, 0.0072346017695963383, 0.014499467797577381, 0.015251172706484795, 0.0072983317077159882, 0.0076301898807287216, 0.0022806739434599876, 0.0084622334688901901, 0.0095333512872457504, 0.0037630693987011909, 0.0088673811405897141, 0.0076555325649678707, 0.0069122905842959881, 0.0096011562272906303, 0.012637162581086159, 0.01197353471070528, 0.01882738433778286, 0.014906685799360275, 0.0082764225080609322, 0.0049772905185818672, 0.0032559854444116354, 0.011837872676551342, 0.0065127941779792309, 0.010224125348031521, 0.0054238331504166126, 0.0089471973478794098, 0.0082219634205102921, 0.0035755664575845003, 0.0030448304023593664, 0.014145995490252972, 0.0089598009362816811, 0.0093187876045703888, 0.0051525803282856941, 0.0047909840941429138, 0.0057941298000514507, 0.0056564039550721645, 0.011766078881919384, 0.020490787923336029, 0.0021862201392650604, 0.011467761360108852, 0.010859265923500061, 0.0066298474557697773, 0.018701698631048203, 0.0057394085451960564, 0.0063543273136019707, 0.0057430975139141083, 0.003764233784750104, 0.0054297321476042271, 0.0075888470746576786, 0.0096375402063131332, 0.0047624637372791767, 0.0085562374442815781, 0.0044618682004511356, 0.0060571129433810711, 0.019338294863700867, 0.33818787336349487, 0.0031209418084472418, } };
const TfArray<96, int> quant28_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 3 };
const ALIGN(16) int32_t tensor_data29[96] = { 10645, -9544, 3154, 49245, -1487, -4528, -11285, 3301, -2859, 662, 2928, -1597, 1263, -4820, 5813, -5719, -1024, 16623, 26583, 2724, 3500, -2894, 883, 338, 17744, -1370, -982, -3189, -5627, -7632, 5256, -9143, -496, -651, -565, 17150, 1799, -3817, 19320, 221, -475, 1565, -9903, -8346, -7588, 66538, 417, 15472, 29805, -12099, -258, 7551, 7735, -496, -5823, 1991, -11375, 1962, 2560, -6722, -1523, -634, -15003, -26, 1611, 15147, 28875, 25800, -11592, 472, -7665, -1187, 51259, 8189, 63, 1208, 18913, 33816, -61, -7139, -1618, -4850, 535, -3137, -57, 2078, 1181, -283, 1448, -2713, 102, 44, -63, -152, 157, 50737, };
const TfArray<1, int> tensor_dimension29 = { 1, { 96 } };
const TfArray<96, float> quant29_scale = { 96, { 0.00016477792814839631, 0.00010232384374830872, 0.00025425676722079515, 4.2334264435339719e-05, 0.00016138679347932339, 0.00015938484284561127, 0.00029318506130948663, 7.5414907769300044e-05, 0.00012218535994179547, 0.00032990737236104906, 0.00015282475214917213, 0.00033563419128768146, 9.1992427769582719e-05, 0.00045524301822297275, 0.00016986666014418006, 0.00015088214422576129, 9.8011340014636517e-05, 0.00031203971593640745, 5.8876492403214797e-05, 0.00019078851619269699, 4.3520998588064685e-05, 0.00018170762632507831, 0.00013670008047483861, 0.00038072402821853757, 0.0002003795380005613, 0.00023201967997010797, 0.0001457441394450143, 0.00019406997307669371, 0.00010934852616628632, 0.00010742523591034114, 0.00015028644702397287, 0.00017635035328567028, 0.00012505239283200353, 0.0001327450736425817, 0.00018730142619460821, 0.00013909421977587044, 0.00033594737760722637, 0.00011642136087175459, 5.7554614613763988e-05, 0.00013830896932631731, 0.00017022593237925321, 0.00034116394817829132, 0.00035885113175027072, 0.0001717254490358755, 0.00017953389033209532, 5.3662915888708085e-05, 0.00019911138224415481, 0.00022431414981838316, 8.8542808953206986e-05, 0.00020864426915068179, 0.00018013018416240811, 0.00016264212899841368, 0.00022590956359636039, 0.00029734501731581986, 0.00028173023019917309, 0.00044299729051999748, 0.0003507455694489181, 0.00019473936117719859, 0.0001171127223642543, 7.661142444703728e-05, 0.00027853818028233945, 0.00015324221749324352, 0.00024056766415014863, 0.00012761961261276156, 0.00021052229567430913, 0.00019345796317793429, 8.4130973846185952e-05, 7.1643073169980198e-05, 0.00033284694654867053, 0.00021081884915474802, 0.00021926559566054493, 0.00012123718624934554, 0.00011272903793724254, 0.00013633246999233961, 0.00013309186033438891, 0.00027684890665113926, 0.00048213620902970433, 5.1440474635455757e-05, 0.00026982967392541468, 0.00025551213184371591, 0.00015599641483277082, 0.0004400399629957974, 0.00013504491653293371, 0.00014951358025427908, 0.00013513170415535569, 8.8570210209582001e-05, 0.00012775840878020972, 0.00017856110935099423, 0.00022676565276924521, 0.00011205796909052879, 0.00020132324425503612, 0.00010498513438506052, 0.00014252030814532191, 0.0004550187150016427, 0.00795736163854599, 7.3433926445432007e-05, } };
const TfArray<96, int> quant29_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(16) int8_t tensor_data30[16*1*1*96] = { 
  /* [0][0][][] */ -3,19,-18,18,40,75,-38,-27,50,0,9,1,-18,4,28,60,7,-8,-14,-11,98,-58,8,-19,-18,-39,-48,-99,-9,-2,50,55,116,-10,-4,4,10,-22,-24,7,-37,15,27,-26,3,-28,-24,21,-12,22,2,-8,-38,-21,8,-5,34,28,-20,-30,-67,27,-6,-8,7,11,48,7,7,1,0,-19,-71,-9,-12,4,-11,-97,4,-13,41,-21,-55,-49,23,-11,-1,34,-9,4,22,-33,21,18,-9,127, 
  /* [1][0][][] */ 69,-86,40,78,-2,-55,-17,-49,-21,-92,-1,23,23,-54,-40,-69,-71,-13,2,33,-24,-110,-23,24,127,-53,-64,22,-18,81,-10,53,15,26,-49,13,-6,7,57,-31,-10,-64,83,-20,-40,2,49,-10,39,23,-10,-60,74,-61,32,-19,25,36,-22,-90,38,-72,26,-43,1,-82,25,25,51,60,-40,-1,-95,37,-8,55,45,84,19,-7,50,10,-74,40,-84,68,-5,57,-47,14,10,17,9,-38,35,-6, 
  /* [2][0][][] */ 12,15,12,-19,3,13,-17,48,61,-9,10,74,8,9,43,-9,-5,-21,2,5,-19,-58,24,-60,0,-5,-34,29,-8,22,115,-54,10,-76,-30,48,24,127,-54,-27,3,-17,-8,43,-43,-48,-65,30,29,31,-47,-24,24,15,-15,-33,-26,4,-8,32,-5,-3,75,85,8,-70,20,-79,-11,-9,2,11,-11,-2,-24,16,17,43,4,21,18,82,34,-15,-17,10,11,-2,30,-6,-10,-49,-30,-10,-7,62, 
  /* [3][0][][] */ -20,-25,-28,39,35,-13,-2,-20,-26,19,5,9,21,-8,49,-17,43,-46,24,18,-13,-11,-10,0,-26,15,12,-3,26,-52,60,-21,17,-13,-15,41,-10,-9,-14,10,13,-71,24,-34,-5,1,6,8,-127,43,-17,25,-118,-46,-27,-40,29,14,-11,53,-8,17,8,21,-15,-96,-36,21,54,18,-7,25,-35,9,-4,-45,-47,-58,28,-45,8,-26,21,75,40,57,42,12,37,-6,-5,3,-30,-1,-19,-29, 
  /* [4][0][][] */ -2,-29,10,-63,2,-14,-52,9,-17,-43,-32,-11,6,73,8,4,54,-9,2,6,-10,24,55,2,-3,-6,19,18,10,-4,2,-2,-29,15,0,19,46,-20,0,-13,10,8,-89,-31,33,-2,-13,-19,7,85,-17,-18,-21,-16,0,-11,3,-27,24,34,15,2,11,-6,32,-109,26,-21,-46,17,-10,4,-10,14,-27,26,-20,63,49,10,16,9,127,-33,33,-17,-11,1,63,13,-8,7,-35,12,-5,-50, 
  /* [5][0][][] */ -16,-3,-2,3,6,2,-3,119,60,-12,-12,-21,0,31,32,15,-14,-19,-9,-25,-38,-15,16,-48,6,23,22,81,72,8,67,54,-46,19,-8,-12,-43,-36,-30,-16,-36,-18,-2,2,65,13,11,13,10,14,-21,10,-25,1,-2,-8,-19,-14,-9,43,-55,12,-25,-46,13,13,-25,-1,2,19,6,-5,37,3,10,0,-5,18,12,127,-2,-46,30,31,-3,-3,26,-37,1,-19,14,-121,-26,-25,-15,-114, 
  /* [6][0][][] */ -16,-5,-15,-45,-5,-13,-9,15,5,14,-18,-5,29,-55,4,-7,-7,-59,19,5,0,6,-12,18,76,-10,-2,-2,13,1,13,-16,-24,-4,-17,5,15,12,22,28,-7,-27,-40,-10,-6,-20,21,-127,21,33,17,8,5,-1,-6,-46,33,-2,-3,6,17,11,-6,3,33,71,25,-19,-10,-6,19,-19,9,10,40,-12,-33,25,-1,8,-14,2,58,-34,-7,40,20,-23,16,6,-39,-5,-14,12,-5,21, 
  /* [7][0][][] */ 19,7,28,-19,-4,2,-6,-21,-7,-16,-18,-19,-11,-85,28,9,-4,-30,-18,-7,6,-14,-30,-7,-16,-13,1,-19,5,10,10,0,-14,1,-10,-13,5,-7,-26,20,2,-10,-15,31,-5,17,-17,67,0,29,-16,-28,-28,0,0,-52,44,0,0,-5,-4,1,-11,-7,-24,42,17,-20,-6,-10,2,42,-7,-7,-14,3,45,10,-7,-20,4,-34,39,-4,-35,127,-6,-3,-37,-23,-6,17,-20,-2,-3,7, 
  /* [8][0][][] */ -73,47,-52,-5,40,-12,-21,23,6,77,-38,6,6,25,70,-21,-5,25,-72,18,20,22,-42,3,-42,-26,19,16,54,-95,-1,-1,17,5,4,-11,-20,19,-53,51,2,17,2,-127,-38,-8,44,-22,-45,17,2,66,-100,81,14,1,13,-19,-25,-13,-8,-36,21,21,-28,26,32,-22,-15,1,20,72,-23,26,43,38,-3,-97,4,-40,-18,-27,16,11,-59,1,13,-45,9,26,-23,9,30,-10,-13,-16, 
  /* [9][0][][] */ 20,-60,-30,-40,17,26,-17,15,27,-13,1,18,-43,-30,6,13,-2,-6,43,-19,-17,3,-28,-45,28,16,34,-7,-29,-33,-25,-5,-6,19,8,33,6,45,-42,22,17,8,-29,-92,14,-22,32,-127,-38,-8,0,32,-10,12,-18,10,-52,42,-20,24,5,12,11,28,30,114,31,37,6,-15,7,-28,-15,-9,-27,10,76,-23,19,15,-18,1,10,-38,0,25,4,2,-47,44,-29,7,3,23,6,-21, 
  /* [10][0][][] */ 35,46,-27,47,78,-119,-16,-19,-1,48,26,-5,-15,33,14,-84,6,44,-29,47,-94,-2,-1,-39,-67,-26,-63,56,7,17,8,39,-17,-22,33,-10,96,-14,-9,-15,-17,74,47,-19,-57,-11,-43,8,-17,-15,-53,-7,-21,-10,2,-24,10,27,-22,-13,5,3,-27,35,7,58,65,24,34,6,30,58,-58,-21,-47,-22,-7,38,-26,16,30,-6,-72,-40,64,-42,104,-23,-28,6,18,-6,97,46,-15,-127, 
  /* [11][0][][] */ 42,42,-37,30,5,24,51,11,-4,-15,-33,-9,4,7,39,-9,-4,-9,-114,7,5,17,22,-9,-46,-15,-7,6,1,15,6,-7,-5,5,9,14,20,25,-6,19,8,33,63,-92,28,-44,8,-7,-127,14,2,-49,24,38,-15,9,-18,-7,10,3,14,-21,-9,12,-52,59,-19,4,23,-1,31,8,-50,-29,13,27,-5,-36,-54,16,15,-4,93,46,4,-5,-6,-11,0,26,-20,-3,5,9,-21,16, 
  /* [12][0][][] */ -31,-9,9,-5,-26,28,12,-6,127,8,-9,1,-6,0,-28,-36,31,23,18,72,54,19,-16,-16,-1,7,19,-22,-99,-4,32,-39,11,-2,-10,-23,13,-10,31,-4,-49,-19,-5,6,-1,28,5,-7,16,3,-33,15,14,-9,15,-1,68,-23,8,5,16,-12,17,-14,1,22,-43,5,-1,-2,-16,-32,17,12,-72,11,30,-8,16,-62,-18,6,42,40,-15,-25,-25,-15,16,23,1,36,-23,-27,15,2, 
  /* [13][0][][] */ 25,-13,-27,26,35,1,12,1,-12,6,9,0,16,-13,14,-16,18,-73,-32,17,-9,-20,12,6,8,12,2,0,-9,-33,-5,12,1,6,9,41,16,-4,-1,19,2,6,22,34,17,15,-9,-127,19,-2,5,11,-13,3,20,8,-10,18,16,16,7,19,-3,4,-8,-21,-17,-47,3,15,-11,-34,-14,39,-10,22,-23,-1,17,-3,27,-13,-14,17,13,23,12,20,0,-1,21,-12,3,13,-10,-9, 
  /* [14][0][][] */ -111,-46,34,48,21,-45,-27,5,-17,11,-5,9,58,2,-127,13,67,-12,-4,15,-9,-7,27,24,-112,5,33,-14,-37,-73,-42,2,0,11,29,-55,13,24,8,28,26,29,-11,-45,16,118,78,63,-115,43,23,37,-47,-14,36,3,6,-3,63,58,43,61,15,45,5,-19,-43,49,0,75,-68,-88,-80,11,2,44,-6,50,93,-16,52,21,29,33,57,7,47,42,29,47,76,-3,-6,36,23,-30, 
  /* [15][0][][] */ 85,-25,30,14,-10,59,38,-31,-11,51,0,2,-99,-27,-4,40,2,41,53,-25,11,30,-78,62,21,10,34,-7,16,50,-61,-70,17,-52,49,5,42,-37,-53,-104,0,26,1,32,-13,52,-26,-40,89,-50,-46,29,36,-127,73,-104,-5,-53,23,19,-121,10,17,21,71,-15,-49,49,-39,67,-25,19,38,24,16,4,18,-46,63,-21,-19,-2,45,74,-8,4,3,-44,1,5,79,-2,-70,59,22,-10, 
};
const TfArray<4, int> tensor_dimension30 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant30_scale = { 16, { 0.019286163151264191, 0.012830761261284351, 0.012545721605420113, 0.0094371195882558823, 0.015293238684535027, 0.015093771740794182, 0.014390160329639912, 0.01768585667014122, 0.009047437459230423, 0.010892250575125217, 0.016051726415753365, 0.025817576795816422, 0.019762089475989342, 0.019663497805595398, 0.020398793742060661, 0.014350878074765205, } };
const TfArray<16, int> quant30_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int32_t tensor_data31[16] = { -479, -3395, -12227, 31602, 25242, 3181, -6200, -6567, 27169, 5151, 25379, 21875, -6989, 12233, 35133, -26492, };
const TfArray<1, int> tensor_dimension31 = { 1, { 16 } };
const TfArray<16, float> quant31_scale = { 16, { 0.00045379207585938275, 0.00030190026154741645, 0.00029519345844164491, 0.00022204987180884928, 0.00035984092392027378, 0.00035514758201315999, 0.00033859201357699931, 0.00041613780194893479, 0.00021288088464643806, 0.00025628824369050562, 0.00037768768379464746, 0.00060747237876057625, 0.00046499035670422018, 0.00046267054858617485, 0.00047997164074331522, 0.00033766773412935436, } };
const TfArray<16, int> quant31_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int8_t tensor_data32[96*1*1*16] = { 
  /* [0][0][][] */ 8,65,-26,60,19,2,16,-5,48,39,-44,99,8,-127,51,-114, 
  /* [1][0][][] */ 30,58,-21,-29,16,-24,127,-116,6,93,-17,-19,17,-68,43,25, 
  /* [2][0][][] */ -127,35,-54,-16,6,-38,55,101,-46,44,100,-37,-87,47,51,-62, 
  /* [3][0][][] */ -61,68,52,80,-51,77,58,111,3,81,-127,15,43,-65,-69,-68, 
  /* [4][0][][] */ 12,-3,37,69,-18,66,-6,41,13,-19,0,-8,26,-3,-127,-26, 
  /* [5][0][][] */ -4,-25,76,-23,18,-34,-15,29,-90,105,-23,-127,-13,27,-69,-19, 
  /* [6][0][][] */ 2,8,25,-12,23,51,-64,-75,-2,4,43,-19,127,-20,-15,-35, 
  /* [7][0][][] */ 17,9,127,-18,-30,-44,12,-3,-81,23,-78,-50,18,-15,38,-8, 
  /* [8][0][][] */ 43,25,77,64,-74,111,33,63,58,-6,20,-113,-30,-7,-127,-74, 
  /* [9][0][][] */ 34,-123,60,40,23,-26,-11,42,127,12,81,26,-33,-2,-113,-26, 
  /* [10][0][][] */ -32,-117,-4,-22,-115,-7,0,78,91,127,36,-37,-63,60,107,1, 
  /* [11][0][][] */ 54,-3,20,-92,28,-47,-115,-127,-67,53,-20,-20,24,-15,28,-79, 
  /* [12][0][][] */ -21,3,20,-52,-53,-36,-106,-2,-54,-97,-32,17,46,127,114,66, 
  /* [13][0][][] */ -17,-83,-59,26,-12,-83,1,-7,48,8,-9,1,19,17,127,25, 
  /* [14][0][][] */ -4,-66,40,24,12,38,8,127,9,29,27,-40,18,27,-53,117, 
  /* [15][0][][] */ 21,-30,6,65,19,0,90,-5,7,-127,11,-30,-3,-17,-11,-40, 
  /* [16][0][][] */ 46,-78,-39,35,15,6,30,-80,122,73,92,13,12,112,59,127, 
  /* [17][0][][] */ -95,-67,52,99,99,43,21,-18,127,-55,-17,-42,51,110,-108,54, 
  /* [18][0][][] */ -32,1,4,16,-103,-24,-11,44,-78,-34,-4,-64,3,-127,71,-6, 
  /* [19][0][][] */ 55,-52,58,-50,102,14,-111,96,127,-91,52,40,-23,91,42,118, 
  /* [20][0][][] */ 35,-29,62,-66,-13,7,-29,54,-17,-55,108,-19,11,7,-34,127, 
  /* [21][0][][] */ -59,-26,17,-40,23,33,-87,-52,-26,57,13,9,-127,-29,44,-19, 
  /* [22][0][][] */ 34,-23,23,-34,16,-62,22,-15,-127,33,-14,-48,-19,-12,70,-12, 
  /* [23][0][][] */ 5,10,21,-4,6,11,-14,-5,-10,-6,39,-11,127,-1,-2,-37, 
  /* [24][0][][] */ -8,-4,-3,-62,-30,-18,54,7,-50,-2,-18,-127,0,-96,34,10, 
  /* [25][0][][] */ -123,-8,-33,5,70,-34,-76,-127,-46,48,-43,-60,-53,-97,22,-42, 
  /* [26][0][][] */ 51,-4,53,-127,125,-54,9,14,118,-43,46,-32,-29,94,17,81, 
  /* [27][0][][] */ 99,-25,18,-33,-37,-51,-2,-18,-21,22,-127,13,16,-15,4,43, 
  /* [28][0][][] */ -127,6,-125,-79,67,0,70,-70,20,67,-46,25,44,2,-51,47, 
  /* [29][0][][] */ -55,-21,-5,127,-16,7,26,-39,11,9,-69,55,16,-76,33,-44, 
  /* [30][0][][] */ 69,-18,127,-31,55,41,-22,91,-46,-85,74,-51,-14,17,-66,80, 
  /* [31][0][][] */ 30,-87,11,-49,15,-61,14,-34,-13,38,107,12,-19,101,58,127, 
  /* [32][0][][] */ -16,66,-37,33,-127,20,-65,-40,-48,-36,5,43,12,47,38,63, 
  /* [33][0][][] */ 42,-19,16,127,-5,-12,21,-41,-114,59,56,-21,31,-4,24,126, 
  /* [34][0][][] */ 80,19,23,9,73,-11,-127,-5,-25,87,-65,-6,-34,10,-6,28, 
  /* [35][0][][] */ 80,10,-22,-11,6,-127,-13,0,-27,-1,-89,-16,76,18,10,39, 
  /* [36][0][][] */ 27,9,-127,7,44,9,-34,29,-36,-19,-1,-3,-4,15,-17,9, 
  /* [37][0][][] */ -3,0,127,-13,-66,26,34,-56,-20,27,-52,12,28,-14,19,2, 
  /* [38][0][][] */ -127,38,3,35,31,72,5,-29,17,-13,112,-18,-25,19,-16,-18, 
  /* [39][0][][] */ -18,-6,13,37,27,-14,-127,43,10,29,-8,-41,1,-17,0,-5, 
  /* [40][0][][] */ 6,69,-12,127,18,32,60,39,-57,-36,-16,68,19,52,-52,-36, 
  /* [41][0][][] */ -3,-6,-58,-35,-49,-26,127,88,-82,95,-25,-14,-10,80,43,-16, 
  /* [42][0][][] */ 79,-30,-23,-32,47,43,-79,112,88,-127,126,78,18,51,-77,78, 
  /* [43][0][][] */ -69,-15,30,-23,41,17,-81,-94,-15,27,15,-34,-127,-13,44,-13, 
  /* [44][0][][] */ 15,0,-18,-12,-7,-18,-1,-43,127,-10,24,38,12,68,7,48, 
  /* [45][0][][] */ -42,-76,11,-87,21,-1,-18,38,23,-72,-14,-26,36,93,-25,127, 
  /* [46][0][][] */ -51,16,-33,85,-85,-27,9,-77,-127,48,-44,-19,-3,26,7,-48, 
  /* [47][0][][] */ -39,-18,-113,127,-3,67,4,-16,9,59,60,53,-23,-24,31,-18, 
  /* [48][0][][] */ -13,-11,19,-126,14,-57,-12,-3,-89,-2,20,-41,-60,65,127,64, 
  /* [49][0][][] */ -21,27,28,100,-24,25,-59,1,13,-38,-75,-37,-31,-61,-92,-127, 
  /* [50][0][][] */ -3,64,17,-79,58,28,-19,61,127,-3,-31,3,-7,-39,11,-44, 
  /* [51][0][][] */ 9,-36,7,-13,35,10,-49,-127,11,-65,5,-7,-12,-15,-6,1, 
  /* [52][0][][] */ 25,16,-17,21,27,3,-48,100,-70,127,-41,-38,83,98,13,-29, 
  /* [53][0][][] */ -2,86,4,-85,-43,1,27,-11,-40,-56,-40,40,3,-127,-74,-4, 
  /* [54][0][][] */ -11,11,18,41,46,-27,7,-25,-1,37,-14,-28,-1,127,-44,-13, 
  /* [55][0][][] */ -110,114,84,-34,47,-7,-7,1,-57,23,112,-23,5,-36,127,-8, 
  /* [56][0][][] */ 55,9,30,-97,93,1,-21,26,60,-40,34,127,-26,27,81,43, 
  /* [57][0][][] */ -26,7,23,80,-23,16,40,127,-1,10,12,-24,-2,64,7,14, 
  /* [58][0][][] */ 29,114,-4,-127,7,33,1,12,82,-11,-20,63,-16,-64,47,76, 
  /* [59][0][][] */ 37,41,59,-99,-35,1,30,3,16,12,21,-59,-8,-127,-57,31, 
  /* [60][0][][] */ 64,3,127,-61,-50,120,30,-30,-18,53,-76,0,47,-2,46,-12, 
  /* [61][0][][] */ -18,45,-41,-38,-60,12,127,123,-2,91,-6,5,21,83,11,-35, 
  /* [62][0][][] */ -24,-12,3,8,-66,14,-60,10,-9,-34,0,-49,21,-127,68,-9, 
  /* [63][0][][] */ 21,-29,-2,-77,52,-4,-124,-127,-54,83,-24,8,48,16,23,-46, 
  /* [64][0][][] */ -35,-7,30,52,75,6,-39,-127,24,-98,-3,-35,-13,-18,-11,-6, 
  /* [65][0][][] */ -127,8,33,-69,19,81,40,-50,-85,41,43,-12,12,12,-23,-33, 
  /* [66][0][][] */ 55,-12,95,23,-53,22,-19,51,-69,-21,78,-98,-19,46,-127,-21, 
  /* [67][0][][] */ 69,-55,-45,62,69,-61,-86,-127,59,-125,-66,-36,-107,29,-56,9, 
  /* [68][0][][] */ 6,-26,-67,63,-46,-102,-6,-58,-18,-3,26,-61,-56,56,127,-35, 
  /* [69][0][][] */ -25,24,-81,50,-27,-116,20,76,31,3,56,-22,127,31,-7,13, 
  /* [70][0][][] */ 13,11,-35,-15,-24,14,127,78,-27,58,-10,13,18,57,8,-10, 
  /* [71][0][][] */ 16,-5,-19,-46,21,-2,7,57,-25,-39,-9,2,19,-127,65,15, 
  /* [72][0][][] */ 20,32,-16,32,34,-36,-35,-127,-2,63,-53,25,34,62,37,38, 
  /* [73][0][][] */ -35,-127,-32,-69,-86,-23,29,-25,-38,6,-32,-46,8,-38,74,-10, 
  /* [74][0][][] */ -44,40,70,113,5,4,-127,107,20,-37,-40,-39,-4,2,-29,-15, 
  /* [75][0][][] */ -52,33,-41,14,-33,98,101,126,-15,57,7,-36,-127,79,17,21, 
  /* [76][0][][] */ 16,-26,-31,-27,45,-62,-127,-121,-15,-24,22,-15,56,-4,79,-23, 
  /* [77][0][][] */ -42,16,-31,-22,-47,-5,-19,-49,127,14,-77,15,1,50,21,-88, 
  /* [78][0][][] */ -85,-127,-14,73,59,54,-23,44,-18,-79,-99,72,52,-37,103,70, 
  /* [79][0][][] */ 27,-1,34,-46,127,11,41,14,76,28,-5,40,1,-21,2,-43, 
  /* [80][0][][] */ -22,-48,58,-121,-27,-30,11,4,-90,-45,2,-56,-9,127,-33,12, 
  /* [81][0][][] */ 25,-1,43,34,-3,44,-16,-13,5,-4,1,-48,-2,26,-127,29, 
  /* [82][0][][] */ -113,-34,33,-127,4,-59,-9,-55,-28,-37,-7,-118,-13,-123,-115,1, 
  /* [83][0][][] */ 9,-4,-50,-84,-37,16,-2,19,-118,-12,17,-101,28,-127,14,69, 
  /* [84][0][][] */ 127,28,10,40,-55,7,-45,26,-12,-18,97,-7,-71,17,91,-77, 
  /* [85][0][][] */ -10,-9,22,-21,43,-1,-42,110,-67,-93,-73,-28,-6,77,66,-127, 
  /* [86][0][][] */ 4,1,-1,-6,-60,55,-35,38,-97,-57,44,-21,-9,-127,-12,26, 
  /* [87][0][][] */ 127,-52,15,0,-73,-29,-3,7,-4,9,-122,2,42,-23,0,67, 
  /* [88][0][][] */ 12,68,-40,-20,-13,-5,6,-32,88,40,35,59,-2,-53,127,-117, 
  /* [89][0][][] */ 48,74,-87,-21,-38,-30,30,-70,50,51,21,-30,-41,0,-22,-127, 
  /* [90][0][][] */ -15,-28,-14,-78,-73,16,127,-51,76,-58,-11,-82,6,-15,-34,2, 
  /* [91][0][][] */ 0,10,-54,-92,-65,-3,33,-47,-58,47,49,54,16,-39,39,127, 
  /* [92][0][][] */ 15,0,10,17,56,-5,-79,-127,50,-70,-1,-34,-25,-13,0,-12, 
  /* [93][0][][] */ 76,1,44,-127,-44,2,-19,51,52,-79,82,-22,-25,100,-15,32, 
  /* [94][0][][] */ -84,34,-87,24,73,-127,-24,6,-6,-50,101,-36,-2,-13,-16,0, 
  /* [95][0][][] */ -8,67,27,-127,-17,3,-52,11,70,-42,-95,-109,3,30,-85,-18, 
};
const TfArray<4, int> tensor_dimension32 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant32_scale = { 96, { 0.00069055595668032765, 0.00055977300507947803, 0.00050338823348283768, 0.00023189041530713439, 0.00061105063650757074, 0.00084791058907285333, 0.0014385351678356528, 0.00097552960505709052, 0.00023482699180021882, 0.0010039567714557052, 0.00077592115849256516, 0.00071767577901482582, 0.00038111026515252888, 0.00064538029255345464, 0.00026159113622270525, 0.0009349353495053947, 0.00058219482889398932, 0.00048254465218633413, 0.00049339153338223696, 0.00058347731828689575, 0.00093778560403734446, 0.0015940609155222774, 0.0005840264493599534, 0.0018427331233397126, 0.0023498758673667908, 0.00074282870627939701, 0.00047494808677583933, 0.00061172689311206341, 0.00071752275107428432, 0.00027541175950318575, 0.00016143023094628006, 0.00043029364314861596, 0.00067448936169967055, 0.00080337817780673504, 0.00066906091524288058, 0.00077677943045273423, 0.0010199724929407239, 0.0012379669351503253, 0.00044543173862621188, 0.0022032088600099087, 0.00045575349940918386, 0.00049675250193104148, 0.00015263646491803229, 0.00092917971778661013, 0.00035658720298670232, 0.00056457531172782183, 0.00090012449072673917, 0.00053456204477697611, 0.00020388849952723831, 0.00071411230601370335, 0.00066811201395466924, 0.00065250543411821127, 0.0009319341043010354, 0.00094985536998137832, 0.0012660786742344499, 0.00062953733140602708, 0.0006658699712716043, 0.0003558612079359591, 0.0010250475024804473, 0.00071434298297390342, 0.00069119303952902555, 0.00024942826712504029, 0.00066021626116707921, 0.00056897447211667895, 0.00072239787550643086, 0.00067361938999965787, 0.00066306430380791426, 0.00075038342038169503, 0.00076997379073873162, 0.00072417611954733729, 0.00070508266799151897, 0.00059139583026990294, 0.00039014811045490205, 0.00056572194444015622, 0.00094601989258080721, 0.00084780348697677255, 0.00069527997402474284, 0.00085523852612823248, 0.0010304569732397795, 0.0010191018227487803, 0.0003679233486764133, 0.00048645253991708159, 0.00056012324057519436, 0.00037442008033394814, 0.0013030307600274682, 0.00091581279411911964, 0.00061845243908464909, 0.00018478433776181191, 0.00042476825183257461, 0.00063872389728203416, 0.00069418601924553514, 0.0011569669004529715, 0.00074229197343811393, 0.00057132687652483582, 0.00062619580421596766, 0.00033228824031539261, } };
const TfArray<96, int> quant32_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int32_t tensor_data33[96] = { 1481, 7103, 10054, 26406, 13083, -3149, -1503, 4461, 26819, -3638, 9191, 3257, 8853, 9579, 24498, 1663, 2257, 6913, 12037, 5435, -243, 352, 9194, -894, 2968, 84, 12663, 6228, 6070, 34106, 47200, 15235, 6529, -979, 8105, 1960, 1290, 3126, 16226, -655, 11096, 8526, 47570, -3052, 24448, 7226, 5126, 13444, 53620, 7819, -585, 6931, -3007, -113, -2169, 4622, -415, 14131, 5359, 5468, 6267, 14662, 5954, 4669, 9105, 7705, 5240, -4745, 5835, -2627, 4232, 7216, 14202, 4840, -4305, -4244, 6407, 394, 1936, -1019, 14938, 9182, 4180, 14086, 2414, 287, 10091, 55184, 8784, 9514, 4862, -115, 5286, 7405, 4915, 13726, };
const TfArray<1, int> tensor_dimension33 = { 1, { 96 } };
const TfArray<96, float> quant33_scale = { 96, { 0.00025870493846014142, 0.00020970935293007642, 0.00018858576368074864, 8.6873762484174222e-05, 0.00022891962726134807, 0.00031765515450388193, 0.00053892249707132578, 0.00036546541377902031, 8.7973901827353984e-05, 0.00037611517473123968, 0.00029068553703837097, 0.00026886491104960442, 0.00014277642185334116, 0.00024178065359592438, 9.8000629805028439e-05, 0.00035025746910832822, 0.0002181093004764989, 0.00018077707500196993, 0.00018484066822566092, 0.00021858976106159389, 0.00035132528864778578, 0.00059718755073845387, 0.00021879548148717731, 0.00069034832995384932, 0.00088034063810482621, 0.00027828803285956383, 0.000177931142388843, 0.00022917297610547394, 0.00026880757650360465, 0.00010317828855477273, 6.0477064835140482e-05, 0.00016120212967507541, 0.0002526858588680625, 0.00030097184935584664, 0.00025065219961106777, 0.00029100707615725696, 0.00038211519131436944, 0.00046378307160921395, 0.00016687336028553545, 0.0008253944106400013, 0.00017074022616725415, 0.00018609980179462582, 5.718263128073886e-05, 0.00034810122451744974, 0.00013358927390072495, 0.0002115084498655051, 0.00033721618819981813, 0.00020026449055876583, 7.6383323175832629e-05, 0.00026752991834655404, 0.00025029669632203877, 0.00024444996961392462, 0.00034913312993012369, 0.00035584700526669621, 0.00047431464190594852, 0.00023584534937981516, 0.00024945675977505744, 0.00013331729860510677, 0.00038401645724661648, 0.00026761632761918008, 0.00025894361897371709, 9.3444017693400383e-05, 0.00024733869940973818, 0.00021315652702469379, 0.00027063395828008652, 0.00025235995417460799, 0.00024840564583428204, 0.00028111826395615935, 0.00028845746419392526, 0.00027130014495924115, 0.00026414712192490697, 0.00022155629994813353, 0.00014616228872910142, 0.00021193802240304649, 0.00035441012005321681, 0.0003176150203216821, 0.00026047471328638494, 0.00032040043151937425, 0.00038604301516897976, 0.00038178899558261037, 0.00013783616304863244, 0.00018224109953735024, 0.00020984055299777538, 0.00014027005818206817, 0.00048815811169333756, 0.00034309353213757277, 0.00023169259657151997, 6.9226283812895417e-05, 0.00015913213428575546, 0.00023928695009090006, 0.00026006487314589322, 0.00043343778816051781, 0.00027808695449493825, 0.00021403780556283891, 0.00023459350632037967, 0.00012448609049897641, } };
const TfArray<96, int> quant33_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int8_t tensor_data34[1*3*3*96] = { 
  /* [0][0][][] */ -46,-72,-11,127,22,72,72,-59,-14,-19,-14,-6,-30,1,37,2,-9,-44,27,22,18,-127,127,6,-84,5,50,-29,-126,-127,39,25,12,23,60,-18,-29,-10,31,-8,-13,28,-109,70,26,-66,37,46,-18,53,-25,20,4,-7,16,45,-91,-49,-61,-18,-12,1,9,37,67,-25,73,16,-9,17,20,127,22,23,26,-1,-10,17,127,-5,-14,14,-28,20,127,18,-76,-15,2,-32,-15,-40,2,-25,-17,24, 127,-127,75,106,-42,127,38,-119,71,4,-17,127,127,-100,-12,16,11,127,127,-112,127,-75,79,68,-127,-120,-67,-35,-56,47,-59,-20,-88,51,-127,-85,-42,-14,-52,61,-1,127,127,81,-51,-112,-113,-51,-15,-127,43,85,67,-32,45,82,-47,42,-82,-112,-44,-43,-62,67,73,-62,26,32,-84,32,-18,90,116,127,13,20,2,57,-33,53,64,127,127,-23,-8,73,-112,127,-116,-100,5,-127,-90,-127,-37,104, -74,-12,30,-84,15,-25,63,-8,81,-36,-27,17,-19,-6,-9,-11,-8,-18,7,-3,-23,-100,28,-1,-123,96,8,-56,117,50,-16,10,1,12,14,-29,-7,35,20,14,25,14,-119,62,18,-17,36,13,-14,11,-16,5,-9,2,-3,19,-66,6,-33,51,1,41,33,-2,-6,-38,-32,24,9,2,-3,36,9,-26,-5,3,-12,-6,-84,2,-21,-25,-17,1,-111,8,-33,-21,-48,23,-26,-33,29,-26,-15,0, 
  /* [0][1][][] */ -64,-75,72,-37,-47,93,17,127,-53,-22,0,-120,25,-114,79,31,-3,-61,-17,89,54,-65,48,49,-93,-14,127,-23,-23,64,123,-103,-127,83,-85,-56,-36,33,-28,95,-49,-26,-6,45,-48,127,-23,66,16,96,19,-1,14,-55,27,30,127,124,-70,-85,127,-34,-36,127,71,-38,-16,-1,127,38,127,96,-40,102,-4,11,14,13,-31,11,-43,124,-80,109,1,33,-56,30,80,-127,-32,-8,127,-69,-24,0, 67,125,56,-116,127,82,90,38,-127,127,127,-39,-63,-127,-127,127,127,-62,-124,-50,106,95,-121,127,-109,-94,-44,127,-127,110,-127,-127,-88,127,106,127,127,-127,-106,127,-66,-97,110,-127,-127,-35,-127,-127,127,-112,87,43,127,127,127,-127,100,-127,-127,127,20,-82,-127,-101,-127,127,-127,127,-127,-127,-109,-83,-127,-78,127,127,-127,127,-78,127,127,31,-42,-127,60,127,94,46,127,13,127,0,-68,36,127,-127, -52,-12,-50,37,-56,-97,34,-29,19,-34,-28,92,2,96,14,10,-5,64,-7,127,2,-81,-42,8,-69,106,-71,-21,-71,-17,16,-63,-68,37,6,-17,-28,46,-68,45,127,-4,-39,28,-41,-58,17,45,9,119,-10,7,-39,-73,3,19,95,3,1,21,-36,127,92,-53,-42,13,38,-11,-78,120,-18,-85,-1,-54,-16,-22,26,14,77,-36,-71,-41,56,12,-48,-17,73,23,16,63,-43,18,-43,98,-28,-6, 
  /* [0][2][][] */ -66,1,-6,-21,13,-43,59,24,54,-28,-35,-2,18,20,-27,1,-8,64,7,1,-54,-82,1,-10,-25,-57,34,-69,92,38,26,26,16,-11,-11,-47,-7,35,-4,0,-16,-7,-70,108,3,31,12,37,-15,-30,11,-20,22,-1,9,15,-71,24,-11,14,15,0,-20,-4,0,-48,-47,18,-34,14,24,29,14,-19,29,4,17,4,-77,-13,-8,-9,17,14,-127,7,12,-42,-53,-51,-26,-49,10,58,-20,-8, 122,34,-127,-36,-72,-24,35,30,-64,-29,-19,-107,-76,113,-14,37,2,-50,-9,-126,94,-50,-39,0,-108,127,-52,20,-34,-21,-8,-5,-63,12,26,4,-23,-28,127,51,11,-15,67,-34,-39,76,-67,-43,-32,-5,-127,-127,-52,-25,2,40,-66,-7,11,40,-8,-19,9,-47,-53,33,63,-21,115,107,-25,-70,11,-57,3,4,98,4,52,21,13,-97,-48,3,2,9,127,38,-53,38,-18,-107,41,80,-10,26, -52,13,-18,26,16,-67,-127,0,-11,-8,-15,5,15,-24,18,-2,-9,-16,4,17,-48,-70,13,0,20,-97,21,2,-50,-40,-7,16,43,-20,-7,-26,-35,3,42,-40,22,-3,-49,-32,2,65,23,16,-8,-4,11,-8,17,5,-3,-5,-63,-13,2,-36,-12,9,85,-10,35,-2,-2,31,1,5,-5,19,-17,16,0,15,35,0,75,-12,2,-9,-7,-18,75,0,43,-37,59,39,-16,-54,-7,3,-15,-15, 
};
const TfArray<4, int> tensor_dimension34 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant34_scale = { 96, { 0.0042195371352136135, 0.0040180669166147709, 0.0043789492920041084, 0.010755111463367939, 0.01052505150437355, 0.0079975873231887817, 0.0022675029467791319, 0.00358585175126791, 0.010444683022797108, 0.01098320260643959, 0.010301168076694012, 0.004789452999830246, 0.011174758896231651, 0.009215380996465683, 0.016591746360063553, 0.0062927473336458206, 0.0079341856762766838, 0.0073111187666654587, 0.0068230298347771168, 0.0035871816799044609, 0.0038392029237002134, 0.0019613744225353003, 0.0058158622123301029, 0.0041286488994956017, 0.004457822535187006, 0.0041266004554927349, 0.0078758867457509041, 0.0070457900874316692, 0.0031794258393347263, 0.019340349361300468, 0.015756558626890182, 0.01029875036329031, 0.0052695693448185921, 0.0079066436737775803, 0.010832746513187885, 0.017891872674226761, 0.017840217798948288, 0.0071149268187582493, 0.010681429877877235, 0.0051144231110811234, 0.0094334939494729042, 0.011104178614914417, 0.013939237222075462, 0.0037259564269334078, 0.016010545194149017, 0.0040011750534176826, 0.0049613369628787041, 0.0095591088756918907, 0.029756940901279449, 0.00521476985886693, 0.019587023183703423, 0.0083298785611987114, 0.0080736679956316948, 0.0059808483347296715, 0.0092657683417201042, 0.0052761188708245754, 0.0056604607962071896, 0.017374314367771149, 0.001797505421563983, 0.0067588412202894688, 0.012046865187585354, 0.013449093326926231, 0.0051273475401103497, 0.0067854407243430614, 0.0057232184335589409, 0.0051166717894375324, 0.013025504536926746, 0.017993567511439323, 0.0082688489928841591, 0.0053782905451953411, 0.011202525347471237, 0.0041620987467467785, 0.013532334007322788, 0.0059030055999755859, 0.019833361729979515, 0.010735709220170975, 0.0070527102798223495, 0.0032705795019865036, 0.0026296318974345922, 0.0068593015894293785, 0.010456519201397896, 0.010428539477288723, 0.0067425617016851902, 0.010790777392685413, 0.0025134047027677298, 0.0054057491943240166, 0.0029390053823590279, 0.019867822527885437, 0.011080507189035416, 0.0053224894218146801, 0.015569912269711494, 0.0012793118366971612, 0.007297054398804903, 0.0043411287479102612, 0.012772810645401478, 0.010724831372499466, } };
const TfArray<96, int> quant34_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 3 };
const ALIGN(16) int32_t tensor_data35[96] = { 22788, 59934, -75, 924, 13421, -4078, 1118, 136, 5559, 9256, -5641, -341, 286, 4951, 5200, -9384, -4232, -335, -734, 13052, -10246, 16353, -1966, 7095, 35628, 362, -4747, 18504, 14365, -19942, 1534, 21638, 23570, -8479, 2138, -49, 107, -1458, 4226, -7513, -5367, 207, -8533, -157, 30518, -1229, 13040, -2205, -14996, 996, -67, -747, -2627, 19816, -3789, 14607, 20685, -63, 35432, -199, -9221, -460, 2023, -203, -2682, 14866, -625, -5165, -2819, 3488, 943, -4106, 1525, -122, -1572, -7319, -5, -1403, 41321, -7778, -5882, -11488, -504, 366, 60157, -12423, -9798, -28228, -8046, 9342, -2419, 34217, -116, -2007, -3157, 1360, };
const TfArray<1, int> tensor_dimension35 = { 1, { 96 } };
const TfArray<96, float> quant35_scale = { 96, { 9.9283228337299079e-05, 9.4542752776760608e-05, 0.00010303410090273246, 0.00025306144380010664, 0.00024764827685430646, 0.0001881785283330828, 5.335301102604717e-05, 8.4372986748348922e-05, 0.00024575725547038019, 0.00025842830655165017, 0.00024238042533397675, 0.00011269301467109472, 0.00026293550035916269, 0.00021683250088244677, 0.00039039403782226145, 0.00014806464605499059, 0.00018668672419153154, 0.00017202632443513721, 0.00016054188017733395, 8.440427336608991e-05, 9.0334186097607017e-05, 4.6149987610988319e-05, 0.00013684382429346442, 9.7144678875338286e-05, 0.00010488994303159416, 9.7096482932101935e-05, 0.00018531498790252954, 0.00016578330541960895, 7.4810021033044904e-05, 0.00045506705646403134, 0.00037074254942126572, 0.00024232354189734906, 0.0001239898701896891, 0.00018603868375066668, 0.00025488814571872354, 0.00042098524863831699, 0.00041976984357461333, 0.00016741004947107285, 0.00025132775772362947, 0.00012033936945954338, 0.00022196456848178059, 0.00026127480668947101, 0.00032798206666484475, 8.766956307226792e-05, 0.00037671872996725142, 9.4145296316128224e-05, 0.00011673734115902334, 0.00022492020798381418, 0.00070016330573707819, 0.0001227004686370492, 0.00046087114606052637, 0.00019599714141804725, 0.0001899686612887308, 0.00014072583871893585, 0.0002180180890718475, 0.0001241439749719575, 0.000133187320898287, 0.00040880739106796682, 4.229424666846171e-05, 0.00015903156599961221, 0.00028345565078780055, 0.00031644926639273763, 0.00012064347538398579, 0.00015965742932166904, 0.0001346639619441703, 0.00012039228022331372, 0.00030648245592601597, 0.00042337807826697826, 0.00019456115842331201, 0.00012654800957534462, 0.00026358882314525545, 9.7931733762379736e-05, 0.00031840786687098444, 0.00013889424735680223, 0.00046666734851896763, 0.00025260492111556232, 0.00016594612679909915, 7.6954813266638666e-05, 6.1873695813119411e-05, 0.00016139533545356244, 0.00024603575002402067, 0.0002453773922752589, 0.00015864851593505591, 0.00025390065275132656, 5.9138936194358394e-05, 0.00012719410005956888, 6.9153065851423889e-05, 0.00046747818123549223, 0.00026071781758219004, 0.00012523504847194999, 0.00036635089782066643, 3.0101455195108429e-05, 0.00017169539933092892, 0.00010214420763077214, 0.00030053671798668802, 0.0002523489820305258, } };
const TfArray<96, int> quant35_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const ALIGN(16) int8_t tensor_data36[16*1*1*96] = { 
  /* [0][0][][] */ -19,-13,1,-29,19,-4,-34,4,14,5,-12,0,-16,-7,-26,3,-2,3,0,-7,7,-28,7,5,10,11,-1,127,34,-35,40,-7,-5,10,6,13,-11,11,-39,-2,-11,7,-2,33,6,13,10,3,26,3,-10,9,18,-22,-5,81,-1,9,-25,-38,2,23,2,-27,-42,-62,-17,41,8,14,19,-12,-10,-31,0,-25,-28,17,0,5,-7,-22,24,26,0,-13,-10,-83,1,-13,3,-2,43,-35,-39,-11, 
  /* [1][0][][] */ 25,-85,-83,-51,127,-7,78,46,-23,-97,-65,-21,6,-13,-58,37,-84,6,58,50,10,31,-17,-41,9,7,2,-80,41,-16,-69,42,-28,45,-1,-4,10,-12,13,27,-18,32,-58,-30,-39,90,2,6,28,-68,21,-10,-13,31,38,12,-55,-14,-35,-45,39,-32,2,-48,-90,107,-24,-13,-2,-15,-17,40,52,-95,-23,5,31,-52,56,2,-3,-21,29,20,-59,31,-34,37,47,-52,-4,12,33,4,35,106, 
  /* [2][0][][] */ -16,53,-92,2,66,85,43,74,2,-111,-9,-13,-5,5,31,18,3,-12,-43,60,22,-10,52,27,41,35,2,-39,35,-7,32,-57,29,52,-23,35,-127,-87,44,20,25,-54,1,-28,13,-37,-1,76,-25,28,-28,28,88,-11,-16,39,45,23,23,-3,18,5,38,-25,13,7,-22,9,-45,13,-13,-23,-43,-65,-2,50,53,39,27,-5,22,-36,11,-5,-37,17,-5,46,-6,20,4,-14,16,-36,-59,5, 
  /* [3][0][][] */ 68,12,93,-13,55,-45,11,-11,-14,-71,17,-27,-2,31,31,108,21,-9,28,15,127,-22,47,18,51,-26,-10,19,30,40,3,83,-98,17,27,-18,-17,-19,-6,32,-71,-29,59,25,24,50,-44,-86,-60,-36,-50,42,-13,-117,2,26,-97,58,54,42,7,94,-18,-49,36,63,-15,-53,29,-37,-1,-63,54,-33,48,-14,19,1,55,44,-42,-82,18,-6,-36,20,29,14,22,13,22,33,36,110,48,-50, 
  /* [4][0][][] */ 33,-9,25,-4,127,42,1,-16,-30,-66,-47,-31,-65,16,3,52,26,-79,-43,96,-23,-8,21,-14,-2,-9,10,-28,9,-19,69,-44,85,16,-29,28,48,16,22,13,-9,-14,-45,-22,-4,-47,-21,15,34,27,-17,19,0,-34,5,-25,30,4,-33,34,-8,48,66,21,51,44,-19,20,-55,7,41,62,23,-75,-40,-25,38,42,93,-43,-14,-43,-1,-7,-80,7,46,47,-48,28,-2,-52,16,17,19,-31, 
  /* [5][0][][] */ 2,-9,-13,22,16,-11,43,-21,-7,-46,-17,6,-8,21,7,16,-8,1,17,0,32,1,-49,68,6,0,18,-85,-4,25,13,20,-7,9,-1,-54,27,15,14,7,13,-12,7,-18,-6,0,6,-11,-14,-8,9,-1,3,-24,-11,-48,-6,27,-25,15,59,-3,3,29,0,52,6,68,4,92,7,36,11,19,-9,62,-24,-6,21,8,-12,-11,-1,24,-16,11,-21,127,7,17,1,-16,15,17,-58,20, 
  /* [6][0][][] */ 17,-78,9,-38,-36,16,41,29,1,-2,-18,-74,-39,2,-28,25,10,-8,3,-11,-50,39,13,3,-19,6,-20,-17,-14,26,37,2,51,12,61,-6,-11,-21,17,-89,-26,81,7,-32,12,-29,-30,11,-6,31,-33,77,-15,-65,-10,-16,5,-66,-3,-5,-11,58,42,-75,24,-22,15,-9,-2,8,127,15,-46,16,-28,19,-87,-11,10,-2,31,45,30,2,-18,-4,32,17,26,11,43,-31,-16,-13,-32,-8, 
  /* [7][0][][] */ -2,127,41,11,123,57,51,-29,-35,-24,36,-20,-30,36,17,22,4,-45,10,24,30,-27,41,11,1,22,9,5,30,-14,4,30,42,3,-42,9,18,6,-11,93,-52,25,21,16,-14,-32,23,-28,-24,-27,27,13,29,-48,-31,48,44,3,-12,-8,-13,-47,3,-12,-62,75,-27,-79,-4,-32,-2,73,-23,-27,26,9,52,53,36,-10,-51,-28,-5,-2,-10,51,-14,9,-23,34,-42,-30,-56,-24,20,0, 
  /* [8][0][][] */ 4,0,57,20,-127,-37,39,-22,35,86,71,18,-21,10,19,13,-37,3,21,4,-35,-9,-108,70,20,-41,66,-10,4,7,6,50,83,-27,-10,-11,-22,-11,15,28,20,-22,39,14,-45,2,54,6,-121,11,31,16,-65,-37,-31,52,19,-63,-93,-16,14,-46,-33,-8,12,73,-9,-55,30,-23,-52,-24,47,57,63,-7,-15,-37,-11,27,-87,4,-20,-4,19,25,73,39,24,-49,55,45,10,1,31,11, 
  /* [9][0][][] */ 19,-107,-14,22,103,75,-37,-34,32,-37,97,85,-21,9,85,-93,22,-27,1,18,-46,-52,39,-5,-27,2,7,27,-31,12,11,-13,26,9,-112,7,-2,13,-7,54,33,-66,-19,67,5,-8,-64,-28,7,25,-6,-79,54,31,-15,-41,-10,80,-23,7,21,-55,-38,127,-76,-9,-15,-27,8,28,-57,-64,50,7,-2,38,69,-51,32,8,-8,-24,3,25,-10,-63,26,7,0,-48,-46,26,-50,-6,-15,-46, 
  /* [10][0][][] */ -51,-22,-38,-39,-26,-2,61,-18,28,22,22,32,29,-5,-10,-7,-11,16,-21,-22,-6,34,18,14,-10,-4,9,-127,21,-39,46,-29,0,20,-1,-9,-7,28,1,-9,3,-30,25,-55,9,-9,24,11,1,30,-30,-10,-28,-26,-1,-50,18,12,-3,-43,19,14,3,6,-37,80,-8,-35,18,-21,4,-12,-31,-5,16,48,-12,31,-23,16,-27,1,10,23,12,-13,-14,106,2,0,9,18,18,-40,37,-24, 
  /* [11][0][][] */ -96,13,-10,10,6,-57,-6,3,-48,-14,-1,22,35,18,-19,-8,47,7,-60,-49,17,-16,-12,7,70,18,69,-8,-24,34,-42,20,-10,29,-11,-14,-11,2,38,-1,-2,-3,-13,0,74,11,73,17,54,47,-7,55,23,-67,14,-8,-69,-5,-41,-48,-5,-26,-2,22,-4,-18,38,-6,17,20,-3,41,-24,23,18,2,-27,80,-127,62,-47,-8,-63,-55,122,14,24,1,31,38,-25,-56,-17,41,-19,10, 
  /* [12][0][][] */ 3,0,-32,-8,68,12,-5,-22,-9,23,27,-6,-6,-12,29,-3,-22,-7,7,-12,-4,-19,-35,43,-11,33,-18,95,-22,27,-27,0,-9,15,3,28,-11,-9,7,8,-3,-18,0,16,-12,4,25,21,-17,-6,4,-40,-25,14,-8,-9,-6,-15,14,28,-19,-17,-4,41,46,-78,6,53,-31,-127,-12,42,9,-1,12,86,14,-8,1,0,2,16,-43,-8,6,-11,12,-66,-15,10,11,-8,-38,37,-8,15, 
  /* [13][0][][] */ -73,68,1,0,-64,-2,-21,12,-32,-39,48,27,73,8,-28,3,-3,23,-41,-5,23,-21,48,-59,66,33,-3,4,17,-34,-26,-102,-88,-35,0,6,1,30,39,-21,-31,79,5,18,36,10,-7,11,56,-11,33,65,61,-60,85,-9,-20,47,38,9,0,22,-11,14,9,-29,2,10,21,12,15,-127,16,-28,-71,14,57,46,-44,-40,89,-19,-2,-27,34,-29,91,-2,-28,-8,-14,18,44,-31,-16,-2, 
  /* [14][0][][] */ -23,21,-7,-63,41,-9,-25,19,-85,5,29,18,-18,-69,-78,-25,-77,-11,69,11,40,-2,24,-107,-47,6,-50,-16,6,-24,0,-38,-65,-42,25,12,-11,8,2,-3,-4,94,-63,-5,-48,31,18,15,127,-36,34,-33,19,63,-109,27,-26,21,-112,19,4,45,31,35,10,25,-5,-7,-50,13,60,24,39,-15,-30,29,60,-70,-29,-96,25,-42,10,28,33,-68,-30,-5,-53,24,38,43,17,43,21,-18, 
  /* [15][0][][] */ -40,-66,-13,-37,6,13,-6,-56,-26,20,-2,-33,34,-10,39,-19,-76,-5,-10,5,-17,11,-59,-43,-4,-1,-8,14,-14,-16,55,-82,-12,32,27,14,-9,21,-93,6,23,-66,5,23,-26,-47,47,26,44,13,-11,-127,-2,39,4,39,29,-12,-14,35,2,4,40,-9,-1,-9,-13,-12,-19,17,4,37,-42,3,3,-32,-34,-13,0,6,-2,42,-7,67,-9,-37,-37,-20,-47,59,24,78,-37,-6,-2,-13, 
};
const TfArray<4, int> tensor_dimension36 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant36_scale = { 16, { 0.037173841148614883, 0.017224032431840897, 0.011119798757135868, 0.0090161729604005814, 0.016494026407599449, 0.016519676893949509, 0.016756866127252579, 0.011206881143152714, 0.013740269467234612, 0.011340541765093803, 0.029973885044455528, 0.024605097249150276, 0.017193421721458435, 0.0097050582990050316, 0.022705810144543648, 0.023328108713030815, } };
const TfArray<16, int> quant36_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int32_t tensor_data37[16] = { -8752, 19448, -13825, -3129, -10844, 8689, 30821, -53721, -3978, 12407, 25300, 19473, -13615, 11490, -10257, 11081, };
const TfArray<1, int> tensor_dimension37 = { 1, { 16 } };
const TfArray<16, float> quant37_scale = { 16, { 0.0008746786043047905, 0.00040527136297896504, 0.00026164232986047864, 0.00021214525622781366, 0.00038809474790468812, 0.00038869827403686941, 0.00039427922456525266, 0.00026369132683612406, 0.00032330045360140502, 0.00026683628675527871, 0.00070526788476854563, 0.00057894346537068486, 0.0004045511013828218, 0.00022835431445855647, 0.00053425435908138752, 0.00054889667080715299, } };
const TfArray<16, int> quant37_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int8_t tensor_data38[96*1*1*16] = { 
  /* [0][0][][] */ -35,99,0,-127,-43,-26,-36,-72,-15,26,9,84,19,-57,-11,45, 
  /* [1][0][][] */ -31,21,-69,-7,-37,-34,32,-80,63,51,-77,7,11,-7,53,-127, 
  /* [2][0][][] */ -11,20,-32,42,42,23,-68,-61,127,-23,-4,2,5,87,-92,3, 
  /* [3][0][][] */ 61,-69,11,-105,17,-26,-16,-10,122,4,82,53,-21,56,14,127, 
  /* [4][0][][] */ -74,51,15,37,9,-14,2,50,7,7,17,-26,-127,-19,-16,30, 
  /* [5][0][][] */ 11,70,120,-2,19,89,-76,89,-53,78,-24,-34,39,-55,-127,26, 
  /* [6][0][][] */ 37,-50,127,-119,46,7,-51,87,-88,-92,60,-26,-2,98,-30,73, 
  /* [7][0][][] */ 48,108,-31,-61,88,11,12,-41,127,86,-38,12,32,-27,66,52, 
  /* [8][0][][] */ 6,-88,7,-83,11,-53,20,-69,36,59,70,-10,25,127,85,64, 
  /* [9][0][][] */ -3,-30,-7,127,37,-7,41,-71,-60,123,28,-5,-5,-74,-3,-22, 
  /* [10][0][][] */ 3,24,-46,-127,18,-10,-16,29,24,-36,12,-24,-21,-32,-7,25, 
  /* [11][0][][] */ 2,10,19,-15,67,-23,86,-58,-74,38,-1,34,1,127,-65,-34, 
  /* [12][0][][] */ 53,-36,-127,-16,6,-66,29,-4,23,36,-85,-53,-15,105,16,34, 
  /* [13][0][][] */ -13,7,-24,12,8,-127,-2,18,0,-16,9,0,7,-11,8,12, 
  /* [14][0][][] */ 2,-18,95,-37,50,-1,-127,-78,-22,-30,23,12,19,-76,-15,-37, 
  /* [15][0][][] */ -96,26,-21,-63,-18,4,127,70,-35,45,92,-28,22,69,71,3, 
  /* [16][0][][] */ -9,64,127,96,7,14,74,59,-88,23,-62,0,12,14,-2,-88, 
  /* [17][0][][] */ -35,-117,-18,28,-75,-26,-59,19,-127,-37,13,-51,-1,39,66,-35, 
  /* [18][0][][] */ 1,37,1,67,38,13,28,-4,77,43,-28,-32,19,127,58,17, 
  /* [19][0][][] */ 23,-37,29,1,92,6,-87,-66,-98,-77,-48,-127,-29,-47,9,-26, 
  /* [20][0][][] */ 101,-52,-78,-48,0,-127,25,40,-46,27,-118,-31,50,-6,38,9, 
  /* [21][0][][] */ 55,-27,69,-21,-20,23,4,127,13,-121,106,40,-3,123,59,101, 
  /* [22][0][][] */ -24,48,-34,127,-41,18,79,59,-8,57,-9,48,-6,9,11,-16, 
  /* [23][0][][] */ 27,5,115,-73,61,-14,-26,39,9,17,36,-9,-10,-7,-127,21, 
  /* [24][0][][] */ -127,37,4,-20,-4,106,27,-29,4,30,81,-10,-65,14,54,-29, 
  /* [25][0][][] */ 30,28,17,25,14,10,62,-54,-7,-127,-23,-18,-12,-28,8,15, 
  /* [26][0][][] */ -42,-8,-4,2,-53,-18,-36,-28,-108,-43,12,-39,13,127,-31,61, 
  /* [27][0][][] */ 0,30,8,63,39,-38,-19,-29,54,12,-31,-4,12,127,-10,13, 
  /* [28][0][][] */ 13,70,55,59,127,0,37,38,-90,-21,-41,-30,15,89,41,-48, 
  /* [29][0][][] */ 4,-7,3,11,24,-3,11,41,-11,-14,-24,-127,6,-19,-11,8, 
  /* [30][0][][] */ -22,82,-54,74,-42,-20,48,-127,-46,55,-16,-7,60,34,83,92, 
  /* [31][0][][] */ -45,-20,-13,-72,-7,7,-58,-117,28,92,-11,-127,-36,-44,1,19, 
  /* [32][0][][] */ -118,-80,-12,61,55,27,-23,2,-11,-44,-127,31,75,2,76,75, 
  /* [33][0][][] */ -5,-38,-25,-12,-72,-16,-72,7,63,6,16,-46,11,-105,127,36, 
  /* [34][0][][] */ 51,-6,68,27,48,16,-52,80,-80,-45,65,24,13,-4,-20,127, 
  /* [35][0][][] */ -50,57,-60,27,-1,-8,24,-113,69,93,-58,13,-5,-8,58,-127, 
  /* [36][0][][] */ -36,46,23,127,31,12,94,12,-22,33,-27,-6,-9,21,-73,-60, 
  /* [37][0][][] */ -2,-5,20,-68,2,-4,-47,-61,-90,-3,2,-2,-2,-127,59,-44, 
  /* [38][0][][] */ 45,89,-17,-57,127,-3,37,-36,119,74,-23,-9,14,-35,55,19, 
  /* [39][0][][] */ -38,68,-5,-127,-14,11,-50,29,48,-73,-21,-14,10,80,42,28, 
  /* [40][0][][] */ -9,-19,27,-80,-1,-11,-14,-45,-127,6,-8,-19,-11,-104,78,-69, 
  /* [41][0][][] */ -13,-10,-35,-11,9,-33,13,-12,-35,16,-43,-4,-127,14,22,28, 
  /* [42][0][][] */ 127,91,-24,-15,-66,-50,-16,-45,0,14,98,-44,-71,57,97,-111, 
  /* [43][0][][] */ -32,127,-69,7,72,-17,107,-55,47,103,-41,7,21,-120,-92,-69, 
  /* [44][0][][] */ -22,-19,2,-44,54,0,-85,-127,-22,-17,13,-1,0,-44,75,-60, 
  /* [45][0][][] */ 0,39,-127,-46,31,-64,32,-66,19,21,-4,-92,33,-34,64,-13, 
  /* [46][0][][] */ 2,2,-17,-89,-17,13,18,-35,-125,-19,14,19,-13,-127,67,-38, 
  /* [47][0][][] */ 20,46,20,-20,127,-10,-23,20,-50,44,2,19,9,-2,123,-25, 
  /* [48][0][][] */ -127,-84,-29,31,64,15,17,-14,5,-27,-106,38,67,5,88,60, 
  /* [49][0][][] */ 17,14,94,73,127,9,53,34,-118,-44,-44,-77,14,121,12,-51, 
  /* [50][0][][] */ 33,-13,-80,-6,32,-127,-45,-17,-24,-20,-6,-35,28,-12,-12,7, 
  /* [51][0][][] */ 2,41,46,17,31,5,-5,16,-127,61,2,-106,7,-105,-28,80, 
  /* [52][0][][] */ 4,52,6,51,46,-10,17,25,59,81,-28,-45,31,127,58,25, 
  /* [53][0][][] */ 1,-48,-14,-24,-86,-12,-75,2,43,22,8,-65,34,-127,122,21, 
  /* [54][0][][] */ 72,-26,-58,1,127,78,-118,-39,-74,-7,-52,-94,11,-55,-5,-34, 
  /* [55][0][][] */ 45,-9,7,-1,35,-47,-74,-127,-19,-68,-55,8,0,-24,22,-2, 
  /* [56][0][][] */ -14,13,22,-22,-6,-18,-89,75,-4,127,-1,-19,31,0,-3,7, 
  /* [57][0][][] */ 9,11,-49,-23,-52,-50,122,85,-21,22,-14,-8,30,19,127,-4, 
  /* [58][0][][] */ 44,19,-127,36,94,97,-45,44,-104,-41,1,8,-27,28,0,-24, 
  /* [59][0][][] */ -109,76,118,28,-74,-65,126,127,20,10,40,-12,7,16,70,-5, 
  /* [60][0][][] */ 9,-2,-45,3,21,-127,-26,-5,-12,-11,-7,-19,28,-12,-1,2, 
  /* [61][0][][] */ 32,0,36,127,75,32,20,11,-92,-6,20,33,-21,30,35,-46, 
  /* [62][0][][] */ -44,127,13,-53,-33,-7,-64,66,-11,-66,-81,-61,-3,-101,-52,-35, 
  /* [63][0][][] */ -34,28,-26,127,-73,18,-68,-30,-72,-35,-18,-33,16,68,37,39, 
  /* [64][0][][] */ 15,1,2,38,4,12,-9,71,33,-1,-9,-47,-7,-127,54,0, 
  /* [65][0][][] */ -20,-39,15,-127,51,-48,57,-44,-21,54,14,-108,-26,10,14,-54, 
  /* [66][0][][] */ 35,-15,64,-17,4,4,-14,90,9,-60,31,37,-3,127,13,65, 
  /* [67][0][][] */ 3,46,-21,-127,-17,-4,-54,38,82,-91,-35,-11,34,74,77,38, 
  /* [68][0][][] */ -29,33,127,8,10,3,-3,6,-40,-26,-15,-40,16,-25,90,-30, 
  /* [69][0][][] */ 127,76,-24,-11,-96,-26,-19,-31,13,15,95,-63,-59,52,77,-94, 
  /* [70][0][][] */ 39,11,-52,-6,-25,27,52,127,-40,100,-37,12,6,69,-32,14, 
  /* [71][0][][] */ 11,-6,-8,8,3,-82,5,27,-33,10,-82,0,-127,-6,46,55, 
  /* [72][0][][] */ 8,24,-127,18,12,14,23,95,-44,-20,6,-3,18,19,-5,2, 
  /* [73][0][][] */ -53,19,42,2,49,-45,-77,-127,21,-86,57,-18,12,-48,48,-10, 
  /* [74][0][][] */ 14,40,39,127,21,0,-85,92,-62,16,-48,41,27,-127,40,-91, 
  /* [75][0][][] */ -11,23,-58,6,9,-8,28,-8,127,11,-5,-10,18,117,-33,6, 
  /* [76][0][][] */ -1,-11,1,22,5,-11,-15,58,13,-29,-21,-127,-8,-3,5,10, 
  /* [77][0][][] */ -23,37,-6,127,-34,10,68,89,8,27,10,46,-27,-9,-18,-11, 
  /* [78][0][][] */ 4,12,35,-104,50,-29,-42,30,9,-35,-3,-29,20,127,11,32, 
  /* [79][0][][] */ -16,-91,-72,-56,-81,-12,26,-66,127,9,22,45,23,33,49,-38, 
  /* [80][0][][] */ -39,-13,114,-109,7,-43,29,-93,-71,55,-61,-127,40,97,100,-44, 
  /* [81][0][][] */ -43,42,-127,26,67,-116,-11,58,-3,-43,59,-8,27,-4,12,-3, 
  /* [82][0][][] */ 127,-16,-12,16,9,-107,-17,10,-15,-7,-113,-7,107,9,-3,26, 
  /* [83][0][][] */ -33,73,-116,-91,-35,-9,51,-117,74,46,-44,-127,21,46,55,105, 
  /* [84][0][][] */ -30,27,67,-47,1,-27,78,-127,-40,42,-18,-73,40,52,78,5, 
  /* [85][0][][] */ -87,127,30,-116,-73,-33,-30,-9,-51,4,-64,26,6,-8,-96,-34, 
  /* [86][0][][] */ -4,7,-33,-7,-28,-33,127,14,-6,-29,2,18,-2,37,81,-16, 
  /* [87][0][][] */ -17,-42,0,-123,8,-30,57,-11,-1,15,-13,-127,-17,2,13,-36, 
  /* [88][0][][] */ 119,-16,61,7,49,-121,-5,19,-95,34,-127,-39,8,49,55,-13, 
  /* [89][0][][] */ 26,-21,-32,-35,34,-13,-34,-9,-47,-1,29,-69,127,1,11,-45, 
  /* [90][0][][] */ -3,-50,44,-58,74,-10,-74,81,54,-92,-41,-21,-15,127,15,-126, 
  /* [91][0][][] */ -46,-2,-18,-37,28,-13,-37,-106,0,70,-12,-127,-40,-10,-4,6, 
  /* [92][0][][] */ -20,22,40,17,2,-127,10,-1,-1,-18,-5,-11,3,-21,16,3, 
  /* [93][0][][] */ 46,-23,127,-11,-51,61,30,-28,-15,25,-73,-15,-17,3,29,0, 
  /* [94][0][][] */ 37,-1,-14,-18,31,-14,-18,-6,-33,-14,2,-58,127,-15,27,-34, 
  /* [95][0][][] */ 127,78,-12,29,-100,-23,-62,1,-11,-6,68,-56,-17,24,85,-58, 
};
const TfArray<4, int> tensor_dimension38 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant38_scale = { 96, { 0.00079624861245974898, 0.00098506524227559566, 0.00085924187442287803, 0.00079039373667910695, 0.00086122058564797044, 0.00095686042914167047, 0.00042527788900770247, 0.0006995548028498888, 0.00048413578770123422, 0.00099132303148508072, 0.00060126266907900572, 0.00064123381162062287, 0.00063634122489020228, 0.003041490213945508, 0.00059979764046147466, 0.00052236823830753565, 0.00034027246874757111, 0.00062412739498540759, 0.0012079139705747366, 0.0007082776864990592, 0.00029763701604679227, 0.00021656652097590268, 0.00036341222585178912, 0.00028002509498037398, 0.00046967100934125483, 0.0013428395614027977, 0.0015440832357853651, 0.00096368108643218875, 0.00060993985971435905, 0.0010358649305999279, 0.00059870840050280094, 0.00075870967702940106, 0.00060010899323970079, 0.00067502155434340239, 0.00076611642725765705, 0.00062932603759691119, 0.00048785062972456217, 0.00055108399828895926, 0.00076492480002343655, 0.00088161724852398038, 0.00042311745346523821, 0.0012044020695611835, 0.0010440597543492913, 0.00042130119982175529, 0.0010345999617129564, 0.00062275986419990659, 0.00069389014970511198, 0.00066033797338604927, 0.00084501091623678803, 0.00060307240346446633, 0.00065165403066202998, 0.00050369929522275925, 0.0013410068349912763, 0.0005857704090885818, 0.00081780547043308616, 0.00094331341097131371, 0.0012012656079605222, 0.00081366935046389699, 0.0008562270668335259, 0.00038093459443189204, 0.0021732393652200699, 0.0011313300346955657, 0.00063019338995218277, 0.0010385153582319617, 0.0012334660859778523, 0.00067379476968199015, 0.00025793456006795168, 0.00049867021152749658, 0.0012738269288092852, 0.0013940039789304137, 0.00053511175792664289, 0.00061645649839192629, 0.0023827145341783762, 0.00071472639683634043, 0.00064940168522298336, 0.00049508828669786453, 0.00064102973556146026, 0.00027739658253267407, 0.00024563507759012282, 0.00054295588051900268, 0.00036937720142304897, 0.0004310655640438199, 0.00044354159035719931, 0.00042500728159211576, 0.00032106740400195122, 0.00077475461876019835, 0.0016314998501911759, 0.00053282233420759439, 0.00025280305999331176, 0.0013911845162510872, 0.00065493257716298103, 0.00068548740819096565, 0.00068825570633634925, 0.0012380299158394337, 0.00089887750800698996, 0.00068058335455134511, } };
const TfArray<96, int> quant38_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int32_t tensor_data39[96] = { -1601, 3217, 5694, 2227, -2500, -3154, 15852, 2061, 2534, -1231, 6696, -323, -8060, 1889, 10498, 4591, 11156, 4728, -3288, -4847, 4279, 25457, 17173, 12147, 844, 711, 3940, 2312, 1761, -3845, 4984, -2016, -285, 3512, 43, 727, 7947, 3942, -1601, 4080, 6118, 4364, 2911, 11176, 3774, 3310, 1457, 6714, 3273, -4524, -4970, 371, -215, -1015, 1954, 15, 155, -649, -3628, 9801, -708, 1151, -858, -1519, -3070, 5747, 17067, 1682, -1845, 494, 1470, 1734, 1152, -1163, 502, 8927, -445, 13648, 15041, -659, 8131, 1551, -400, 1231, 11553, 6268, 2918, 1167, 5468, 2965, -326, -5918, 634, -1733, -1452, -1132, };
const TfArray<1, int> tensor_dimension39 = { 1, { 96 } };
const TfArray<96, float> quant39_scale = { 96, { 0.00039160053711384535, 0.00048446183791384101, 0.00042258104076609015, 0.00038872106233611703, 0.00042355418554507196, 0.00047059051576070487, 0.00020915459026582539, 0.00034404586767777801, 0.00023810130369383842, 0.00048753948067314923, 0.00029570510378107429, 0.0003153631987515837, 0.00031295698136091232, 0.0014958257088437676, 0.00029498460935428739, 0.00025690428446978331, 0.00016734833479858935, 0.00030695012537762523, 0.00059406040236353874, 0.00034833583049476147, 0.00014637992717325687, 0.00010650890180841088, 0.00017872863099910319, 0.00013771826343145221, 0.00023098742531146854, 0.00066041771788150072, 0.00075939070666208863, 0.00047394496505148709, 0.00029997259844094515, 0.00050944549730047584, 0.00029444889514707029, 0.00037313863867893815, 0.00029513772460632026, 0.000331980234477669, 0.00037678133230656385, 0.00030950686777941883, 0.00023992828209884465, 0.00027102688909508288, 0.00037619526847265661, 0.00043358540278859437, 0.00020809206762351096, 0.00059233320644125342, 0.00051347573753446341, 0.00020719882741104811, 0.0005088233738206327, 0.00030627756495960057, 0.00034125993261113763, 0.00032475875923410058, 0.00041558218072168529, 0.00029659515712410212, 0.00032048791763372719, 0.0002477227826602757, 0.00065951637225225568, 0.00028808589559048414, 0.00040220233495347202, 0.00046392800868488848, 0.00059079064521938562, 0.00040016818093135953, 0.00042109834612347186, 0.00018734624609351158, 0.0010688140755519271, 0.00055639585480093956, 0.00030993344262242317, 0.00051074899965897202, 0.00060662708710879087, 0.00033137688296847045, 0.00012685399269685149, 0.00024524942273274064, 0.00062647683080285788, 0.00068558071507140994, 0.00026317164883948863, 0.00030317754135467112, 0.0011718353489413857, 0.00035150736221112311, 0.00031938019674271345, 0.00024348781153094023, 0.00031526281964033842, 0.00013642554404214025, 0.00012080501619493589, 0.00026702941977418959, 0.00018166223890148103, 0.00021200100309215486, 0.00021813680359628052, 0.00020902149844914675, 0.00015790315228514373, 0.00038102964754216373, 0.00080238282680511475, 0.00026204567984677851, 0.00012433028314262629, 0.00068419409217312932, 0.00032210032804869115, 0.0003371274215169251, 0.00033848886960186064, 0.00060887163272127509, 0.00044207411701790988, 0.00033471555798314512, } };
const TfArray<96, int> quant39_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int8_t tensor_data40[32*1*1*96] = { 
  /* [0][0][][] */ 11,48,20,-88,-80,6,-13,59,-26,-44,-122,-94,-107,101,-64,53,29,78,11,-5,-46,-107,-47,15,85,-111,-9,95,47,-83,59,-8,-84,77,18,-71,-35,2,-98,-29,-108,-53,95,-78,56,-27,-89,92,-111,86,-94,14,-32,71,-6,43,-77,-93,-6,24,-25,77,27,-127,61,-122,-109,41,42,-90,-16,104,-63,25,-54,99,-55,-65,-40,-24,-117,41,56,21,-53,-76,-61,-58,18,29,21,50,-101,-95,-57,40, 
  /* [1][0][][] */ 56,0,67,36,13,-69,-4,115,23,34,-79,61,-123,-113,15,-78,-61,-41,13,-42,92,81,-88,-78,41,-10,-42,-75,74,50,-32,-72,-85,-84,-103,-83,28,-70,-46,14,0,98,-15,28,29,-3,-41,32,16,-122,-14,-42,-10,-105,-58,-116,43,44,65,9,53,-98,-32,-54,127,-19,-6,92,75,83,46,101,-1,19,58,32,74,-73,115,-15,-87,105,-80,79,25,11,-110,29,-62,-67,64,-44,-49,10,45,12, 
  /* [2][0][][] */ -3,-73,-86,-127,-46,8,68,-5,21,-42,-72,-52,47,73,-76,-123,-102,31,-49,32,-99,-59,24,21,-87,66,-45,-39,-22,-40,-89,26,46,-75,49,-2,-81,16,-85,63,54,-39,109,73,-69,-25,46,22,-22,-49,-2,87,-95,-85,0,-80,-55,19,83,109,95,107,-72,121,106,88,-81,-87,-4,14,61,-27,29,6,-21,-77,90,112,-110,-84,-94,109,78,27,-79,33,39,27,69,75,77,111,-58,-37,77,79, 
  /* [3][0][][] */ -80,94,49,-94,97,100,70,67,98,24,35,-60,109,35,99,106,-127,69,-55,106,-73,68,-88,-3,99,74,-106,8,50,34,-49,108,-109,23,17,-94,-98,-43,-89,-65,-93,-45,-72,19,-81,-107,-31,-42,-62,105,-33,-102,7,45,102,-65,-93,-107,73,-102,-87,29,-92,-12,8,86,-64,-44,-38,-53,85,3,85,80,-53,-85,-123,-62,75,-70,54,95,-80,-91,71,-114,92,-92,-36,-112,86,96,-94,-49,30,-44, 
  /* [4][0][][] */ -103,19,99,-10,66,33,-16,-43,12,72,-100,-34,-89,93,36,-99,97,35,-35,-65,-96,82,-103,-14,-21,-103,90,59,30,-112,109,15,-110,36,-37,-58,111,-21,-103,-98,100,93,-101,-91,-19,80,-46,-34,111,-16,94,116,95,-127,7,36,-106,-36,118,-49,75,-9,-8,70,-57,25,-101,-85,17,87,41,-13,-51,-6,35,-62,-31,95,-33,29,27,-97,45,-7,50,122,11,-73,-30,-16,108,41,96,-23,-116,-116, 
  /* [5][0][][] */ -104,113,-56,-53,26,-28,-46,65,-16,-114,61,39,-76,36,110,114,-121,127,107,-8,117,11,-53,113,-117,56,-42,-72,-39,42,68,2,-70,76,72,56,101,-60,-62,-40,86,-2,-14,-60,107,124,12,-8,29,99,108,57,-89,-42,49,-37,113,-43,-80,78,63,61,-3,55,84,-58,51,57,103,-67,45,7,-103,91,16,-95,-53,67,36,0,81,120,-97,-45,53,-37,-93,-11,88,115,-37,123,-17,105,6,106, 
  /* [6][0][][] */ 97,-22,26,-82,-97,-8,55,-87,21,84,29,127,28,-61,-15,106,-54,84,32,77,-100,104,86,36,-55,40,-96,-70,-21,-83,1,41,-85,14,68,68,-81,-44,9,54,-80,39,71,6,-97,73,-86,-22,55,97,-3,-15,-67,-96,-51,-80,-61,-8,4,80,48,-14,82,-5,114,80,-15,45,-4,-80,-39,-19,61,-47,91,104,-37,52,-41,-74,22,-14,-34,-88,70,2,-5,107,-9,-89,-79,-35,-69,-5,92,-91, 
  /* [7][0][][] */ 92,55,-27,-89,109,7,-6,-24,30,-43,13,-13,-39,110,103,66,92,11,-21,62,79,-63,9,-21,98,-43,61,105,-51,5,0,27,-88,-22,77,-8,127,16,25,-67,-72,40,-43,96,24,-35,-59,-29,66,-9,-21,116,-16,48,67,35,78,-78,22,-71,37,-49,-12,-28,7,-28,-74,-67,70,-87,-74,17,-70,72,5,75,-31,-21,-44,7,-71,48,23,74,-35,-39,-6,-47,58,121,125,-62,49,-56,95,-85, 
  /* [8][0][][] */ -62,-55,-108,0,52,2,-19,-97,95,-122,127,-99,-26,-98,-119,-1,25,83,92,-80,104,67,103,-53,-71,-100,15,-97,-86,-80,-104,-2,-41,1,-94,117,-117,-98,-45,-68,-17,28,46,-19,-8,-55,-19,99,72,80,-30,-20,121,25,-9,-92,-1,1,-29,24,-95,-19,-101,88,-9,-36,13,-65,-79,37,-104,57,50,89,125,93,101,-2,-9,-20,41,110,-4,68,76,-57,-16,78,64,63,-57,78,-105,111,124,-53, 
  /* [9][0][][] */ -35,-37,41,70,29,55,80,29,11,62,63,68,97,51,-28,-28,-10,-62,-54,-84,-91,78,19,-24,-83,-66,-38,74,68,-118,-32,44,-94,-68,110,-30,-20,-7,-74,-67,98,86,-2,3,39,52,22,-23,-29,-28,-103,-65,-101,23,23,73,-9,-79,14,2,-5,-59,28,97,-127,71,69,59,91,-66,-110,12,44,20,64,-100,102,-68,11,-48,-114,-42,80,-83,55,-70,-91,14,-73,86,34,3,-85,18,24,52, 
  /* [10][0][][] */ -95,46,-74,-102,-34,85,-126,-105,79,-93,83,60,-8,30,74,-9,108,11,-81,37,-12,-65,-46,82,32,103,-29,-25,-106,-83,-14,-113,63,32,108,-113,119,-88,41,112,82,26,29,56,-15,26,-9,-8,-89,127,90,107,101,-105,96,58,19,-17,82,-16,73,61,94,72,-47,103,-4,52,7,-15,70,26,-106,-104,26,58,67,95,77,3,-3,36,10,24,13,76,-91,25,-15,33,-59,86,49,76,18,-18, 
  /* [11][0][][] */ 78,59,-88,-81,74,-19,-41,-87,-89,26,46,-21,44,-70,46,-78,-117,74,-9,-53,-37,-40,65,-79,-105,101,60,68,-6,53,-4,43,53,86,-118,-78,-7,121,-44,-69,54,-108,107,-108,81,30,-98,-19,52,63,-57,98,68,-70,-42,-100,-13,86,-127,77,-30,-17,125,-79,72,-26,93,3,95,97,-43,26,-81,-50,17,-105,-3,73,-75,-12,-92,-16,-104,101,1,-82,-43,-22,-75,49,-25,-54,88,27,123,11, 
  /* [12][0][][] */ -57,-10,-48,87,97,44,-39,-27,-20,69,-31,35,-52,-55,-27,52,44,-31,52,102,-64,-19,65,50,-2,69,-62,7,91,-46,61,72,36,-15,11,-15,27,-55,88,46,71,75,40,-20,31,0,-38,74,-52,88,-45,71,-27,-77,92,37,69,-49,-30,-67,53,-8,127,10,-17,2,8,-57,-69,-79,56,-2,-62,-37,41,-5,-60,5,67,-25,18,83,93,-12,54,-41,-15,-55,-47,-60,8,9,-56,-57,-81,66, 
  /* [13][0][][] */ 42,32,70,-80,89,8,22,-75,10,-127,24,17,-18,76,24,63,66,40,-12,69,102,-29,-22,-91,76,-97,-14,-90,17,-115,-67,-29,-29,-123,16,-19,57,-125,63,29,-32,-82,58,77,40,-26,50,54,-107,71,-66,-15,-47,-113,-16,78,22,-69,68,-82,-123,-25,64,-69,-106,22,-52,-125,-111,-80,-112,80,-58,-37,92,-40,-48,81,-28,-68,65,32,-22,104,87,-58,-126,64,-68,-71,19,-52,52,103,-42,-98, 
  /* [14][0][][] */ -52,-70,100,62,60,-65,23,-18,-5,64,-31,-54,-10,111,-24,41,-85,-30,-18,-95,-12,43,-47,-35,-29,-16,71,35,85,-84,76,-51,-40,93,127,19,37,73,-93,-91,106,120,116,23,80,-76,-5,-45,-106,16,-36,-66,-13,-122,91,-107,16,-96,-29,-93,-97,-82,17,6,-5,61,13,-12,-113,-12,29,-64,-102,-70,50,-11,-92,-6,73,4,119,-24,107,34,-76,-63,-59,71,53,-14,-67,-38,-14,-108,-81,-62, 
  /* [15][0][][] */ 15,51,-7,-59,-116,83,20,58,-109,-58,112,-53,9,-46,-45,-34,-31,102,-127,20,-17,-83,-58,-26,-8,1,110,114,-10,-76,-117,28,65,112,-38,-31,-37,112,-28,-88,-58,127,118,-68,89,61,-76,-86,35,-39,-15,-89,-79,1,38,26,51,-7,65,-46,-102,-92,-104,-68,-39,36,-10,-72,-15,-71,-86,27,74,48,-11,87,-24,104,-100,-26,-19,-62,-32,-51,-47,-48,115,-32,76,-100,-87,107,10,-45,125,-76, 
  /* [16][0][][] */ -13,19,-107,114,85,-71,96,102,-46,42,80,-69,-57,82,-127,-37,29,77,-62,-32,-124,-29,-112,9,103,-73,-83,24,-57,94,107,30,-89,-54,15,5,-19,88,-126,59,42,28,74,-62,-104,-19,-108,-68,-31,43,92,65,-47,-127,52,3,36,89,-46,-71,35,-25,-7,66,-19,27,65,-52,-6,-65,71,13,72,-10,42,-90,77,-62,-104,-58,-36,20,-15,-113,89,-71,-6,-119,106,-104,90,-113,42,20,69,-104, 
  /* [17][0][][] */ -24,84,-127,-36,-42,24,-46,99,26,-50,98,-26,-30,100,26,-64,22,79,-23,66,19,-18,-61,-20,-114,10,-42,-89,-52,48,62,-99,64,-39,-36,37,22,-54,-25,42,-41,115,-29,-85,103,22,-79,-97,32,-115,-8,-109,-78,14,44,29,-66,83,-82,-64,102,93,70,68,-49,34,-96,71,-73,-69,11,-21,-34,-39,-13,38,-110,-61,107,-102,-61,-4,93,-48,74,29,-45,100,15,118,-40,66,-96,-66,77,-34, 
  /* [18][0][][] */ 79,-121,-117,-10,60,16,-114,-101,-54,30,-82,-80,-14,105,25,42,22,96,-107,-43,-86,58,28,43,29,-16,39,-112,-24,-118,32,-117,-30,93,120,-67,26,-37,-61,-80,-103,31,123,-64,-24,46,106,-59,95,-14,-47,-91,-54,4,-39,33,76,30,-127,70,-100,-25,73,101,-7,29,-96,-108,105,-38,-75,95,-98,120,-10,121,34,98,-8,-23,-62,-40,-112,105,9,-69,109,20,78,30,-43,126,-93,-19,6,-122, 
  /* [19][0][][] */ 66,62,-105,87,106,76,-58,9,99,-59,8,-38,77,82,114,-42,35,-95,-25,116,-88,-79,31,122,74,-6,28,-27,71,47,112,-112,76,-19,-90,81,-116,-20,-64,23,70,42,52,49,-38,50,-103,105,127,19,92,-22,68,-78,83,109,59,15,-108,-41,-36,56,114,-58,106,-8,-72,95,112,-8,-93,10,21,87,12,96,13,90,-79,123,-105,-48,108,-92,44,10,92,-78,-75,-6,-17,19,-21,-45,90,-111, 
  /* [20][0][][] */ -6,-65,-3,45,81,33,68,34,-46,-7,14,29,-29,-70,11,-76,9,-43,84,46,44,-89,81,-15,-89,88,-48,36,47,-64,-35,3,28,77,70,-14,127,13,-94,15,79,-88,-66,-15,44,12,-35,-30,61,34,88,-63,7,69,36,-54,-54,-99,107,11,-30,109,54,94,21,79,29,-66,27,68,-59,19,-79,-76,-8,99,-10,-66,35,-65,15,76,64,-44,47,23,-62,-92,91,12,-83,-68,49,-47,19,58, 
  /* [21][0][][] */ 59,99,80,-64,-36,-51,-82,-40,4,78,19,-97,10,-61,-95,-85,-38,-1,-16,-66,-13,47,90,-63,73,27,75,-25,-59,-67,106,43,-59,43,80,93,-114,-68,-94,31,10,49,-23,-3,-57,100,-100,63,71,-100,26,-67,58,-4,-97,-24,-32,-29,65,75,28,-45,-14,73,-15,49,-68,29,30,-23,-17,28,-39,-83,-61,-1,-60,86,99,106,-21,84,24,14,-102,-77,22,52,-25,49,-73,122,-28,-24,127,5, 
  /* [22][0][][] */ -41,-73,89,-47,-99,-117,98,51,39,-7,-43,28,-75,25,-39,-126,-117,-20,-98,82,39,109,-31,78,-116,32,-81,72,-51,-97,-84,-97,-109,109,28,38,32,-119,-90,-88,-42,-21,-98,-12,60,-61,109,-96,-97,-20,-111,74,-105,107,-25,65,102,95,-123,85,-84,3,-21,62,80,-127,-112,-44,62,93,-113,-57,-9,96,-96,-36,-124,-116,49,-54,96,-99,-116,-68,37,79,-48,107,19,92,103,12,-123,92,90,72, 
  /* [23][0][][] */ -39,-2,-1,-29,-96,7,63,17,23,-125,61,-122,-104,87,63,-41,28,43,53,23,52,100,61,-4,56,-48,-73,-77,-115,82,-6,116,88,-57,102,-27,-21,111,81,-73,117,45,98,-95,-96,1,-89,105,32,55,-41,-9,-82,116,69,8,40,4,39,-18,-44,34,85,-127,111,-91,14,-6,94,105,-69,109,103,45,16,-45,-105,20,-89,-11,-105,19,-89,-76,-50,-118,118,-109,-34,-71,-33,-70,11,-52,-64,113, 
  /* [24][0][][] */ -6,91,102,108,64,-19,-106,113,0,-119,-80,82,40,4,-11,-61,-26,45,-47,96,127,-24,-24,35,-41,72,-73,-66,82,126,103,-17,124,-42,-10,-24,3,-40,-77,-85,10,115,-80,47,-48,82,57,-66,-91,-62,40,-14,-54,89,125,-40,70,-39,-49,-23,118,15,63,-31,-107,-2,-65,122,76,-84,-11,36,3,-109,-11,-43,35,-58,-28,74,74,-46,67,-42,-79,-74,-14,-56,-80,87,-54,-16,-65,-65,85,111, 
  /* [25][0][][] */ 17,22,36,56,25,56,-32,47,-26,104,73,75,-104,78,116,-60,13,-7,-96,41,51,112,19,127,60,-39,-15,-8,96,35,-61,38,-92,-65,116,119,-32,66,-82,89,-52,106,57,61,21,-63,-68,-52,-36,48,-81,-9,1,-34,-49,-63,44,-45,125,40,-55,122,-64,42,-94,-47,-35,52,-2,-2,50,45,35,74,24,33,2,36,55,-85,-57,30,-55,17,96,69,-17,31,-72,96,-18,-27,18,36,60,35, 
  /* [26][0][][] */ 76,-86,-1,-12,86,-104,99,-45,42,-12,-96,-1,-52,-73,37,-28,102,6,-88,-81,43,-58,67,90,-9,-41,46,48,27,-11,-55,-47,-31,45,45,115,2,89,-127,104,93,2,-36,-105,-10,49,114,7,15,70,85,-26,98,97,62,23,86,-3,-62,-21,12,125,-93,-105,46,-35,-115,-38,-3,-60,26,38,-120,-68,-87,-81,-25,18,-28,56,105,11,-55,-28,-17,-45,-18,-97,21,12,88,104,-54,55,42,-48, 
  /* [27][0][][] */ 56,40,-117,112,-35,-37,-1,-11,-100,104,-37,-15,-127,70,79,-57,38,-122,-22,-118,-32,50,81,-98,-124,67,-44,49,91,-71,62,-126,106,-95,31,106,110,52,-85,-50,28,50,-32,58,65,-100,101,-78,-26,-65,56,89,106,53,-125,-94,88,-39,-32,4,31,-76,-123,-83,23,107,20,-106,35,-13,26,-114,16,-82,-1,-91,-95,-10,67,13,-68,-89,85,-4,-116,-99,52,-41,107,12,41,105,87,27,60,-110, 
  /* [28][0][][] */ -116,114,-54,83,3,76,-102,-3,61,-92,-94,73,83,-70,15,-95,-74,77,52,91,102,76,10,-87,70,-60,75,104,-68,28,-19,44,-14,23,-48,-57,19,100,-32,121,-89,-23,-2,60,105,110,-11,5,117,-16,-100,10,64,-35,23,69,97,50,12,87,49,-50,8,-127,-66,-2,90,-37,-81,62,70,114,-103,55,107,30,68,-41,-8,83,-66,67,66,-19,55,5,-69,-57,-87,20,84,-76,52,65,-6,102, 
  /* [29][0][][] */ 31,-15,33,13,-30,7,21,-112,-58,-34,-48,-80,69,-18,-78,-20,89,98,-71,102,33,-69,-79,-94,86,-72,-93,-49,-44,88,-56,33,-96,117,102,5,-39,-89,18,-26,114,-50,-18,40,-80,66,-108,3,-30,74,25,50,-85,-11,89,92,49,-19,-65,6,120,99,-61,41,77,-80,-118,39,71,-10,-26,-48,-18,-127,-19,-94,-58,29,2,63,-2,-43,30,-25,26,-101,-74,91,-12,38,-77,-52,-107,-11,-61,-66, 
  /* [30][0][][] */ -77,-96,-99,-52,54,95,55,7,-79,25,32,67,104,59,-111,-115,95,116,84,8,-10,-79,124,-76,15,62,-34,6,71,-42,7,50,4,-29,24,28,-98,-33,86,-20,-9,-96,-73,-87,80,123,-36,-35,-66,100,-92,-40,-116,-18,98,-101,104,59,-8,-2,-48,-127,52,68,125,101,29,70,92,80,117,-81,35,-120,-92,21,64,-28,-6,-40,51,55,106,45,82,-63,69,43,113,39,56,-114,13,81,-70,-76, 
  /* [31][0][][] */ 45,127,79,-46,-63,-2,100,-87,-85,-30,61,-67,-93,-89,101,19,-6,50,-36,36,-25,-45,98,6,67,89,-39,-58,-7,80,60,69,73,33,59,113,62,113,-20,-88,-5,106,-96,38,32,104,46,-8,-115,0,-62,62,22,-92,-11,-5,7,31,41,116,-5,-115,116,-91,18,-96,78,-72,-114,34,111,-34,73,-69,-32,60,-10,85,56,-87,-4,-20,-115,-88,-31,87,117,-109,-73,88,37,-27,-55,-40,-118,73, 
};
const TfArray<4, int> tensor_dimension40 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant40_scale = { 32, { 0.0018768237205222249, 0.0018459496786817908, 0.0017613113159313798, 0.0018197434255853295, 0.0018392374040558934, 0.0017613708041608334, 0.0020183301530778408, 0.002139020012691617, 0.0017671427922323346, 0.0018156232545152307, 0.0017529673641547561, 0.0017870377050712705, 0.0024846934247761965, 0.0018289271974936128, 0.0017886128043755889, 0.0017919333186000586, 0.00177023746073246, 0.0018214768497273326, 0.0017276090802624822, 0.0017338466132059693, 0.0022862779442220926, 0.0020221145823597908, 0.0018057029228657484, 0.0018558122683316469, 0.001784090418368578, 0.0023876095656305552, 0.0017761855851858854, 0.0017738132737576962, 0.0018748181173577905, 0.001830494380556047, 0.0017609341302886605, 0.0017104318831115961, } };
const TfArray<32, int> quant40_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int32_t tensor_data41[32] = { -469, -70, -320, -477, 346, 120, 395, 700, 176, -164, -172, -4, 494, -541, 176, 135, -360, 21, 102, 151, 74, -412, -287, 146, 19, 1746, -255, -259, 60, 66, 129, -167, };
const TfArray<1, int> tensor_dimension41 = { 1, { 32 } };
const TfArray<32, float> quant41_scale = { 32, { 4.4160558900330216e-05, 4.3434112740214914e-05, 4.144262129557319e-05, 4.2817493522306904e-05, 4.3276173528283834e-05, 4.1444018279435113e-05, 4.7490120778093114e-05, 5.0329883379163221e-05, 4.1579831304261461e-05, 4.2720548663055524e-05, 4.1246290493290871e-05, 4.2047948227263987e-05, 5.8463374443817884e-05, 4.3033582187490538e-05, 4.208500831737183e-05, 4.2163137550232932e-05, 4.1652645450085402e-05, 4.2858278902713209e-05, 4.064962558913976e-05, 4.0796392568154261e-05, 5.3794774430571124e-05, 4.7579167585354298e-05, 4.2487128666834906e-05, 4.366617213236168e-05, 4.1978597437264398e-05, 5.6179051171056926e-05, 4.1792602132773027e-05, 4.1736784623935819e-05, 4.4113367039244622e-05, 4.3070456740679219e-05, 4.1433744627283886e-05, 4.0245457057608292e-05, } };
const TfArray<32, int> quant41_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const ALIGN(16) int8_t tensor_data42[2*1*1*32] = { 
  /* [0][0][][] */ -42,-13,-48,-48,101,-7,127,6,20,-77,-87,-63,103,-21,115,-21,-89,-6,70,7,84,-37,95,-51,-59,122,1,-91,-82,-77,5,25, 
  /* [1][0][][] */ 92,127,-90,-76,13,106,18,-70,75,-104,-94,58,-70,-1,31,86,-91,100,107,78,-76,0,-14,55,111,-16,-83,-92,64,93,122,-116, 
};
const TfArray<4, int> tensor_dimension42 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant42_scale = { 2, { 0.0038730562664568424, 0.0032595002558082342, } };
const TfArray<2, int> quant42_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(8) int32_t tensor_data43[2] = { 26203, -30943, };
const TfArray<1, int> tensor_dimension43 = { 1, { 2 } };
const TfArray<2, float> quant43_scale = { 2, { 0.00020674157713074237, 0.00017399029457010329, } };
const TfArray<2, int> quant43_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.60337668657302856, } };
const TfArray<1, int> quant46_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.45756512880325317, } };
const TfArray<1, int> quant50_zero = { 1, { 16 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.51867973804473877, } };
const TfArray<1, int> quant53_zero = { 1, { -20 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.65933108329772949, } };
const TfArray<1, int> quant54_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.34060016274452209, } };
const TfArray<1, int> quant58_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.19675649702548981, } };
const TfArray<1, int> quant61_zero = { 1, { -26 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.37463283538818359, } };
const TfArray<1, int> quant62_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.28948748111724854, } };
const TfArray<1, int> quant65_zero = { 1, { 25 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.49180686473846436, } };
const TfArray<1, int> quant66_zero = { 1, { 24 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.053379438817501068, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.098226584494113922, } };
const TfArray<1, int> quant69_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,2,3 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,4,5 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,6,7 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,8,9 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,10,11 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,12,13 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,14,15 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,16,17 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,18,19 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,20,21 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,22,23 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,24,25 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,26,27 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,28,29 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,30,31 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,32,33 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,34,35 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,36,37 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,38,39 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,40,41 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,42,43 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 55296, (TfLiteIntArray*)&tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36912, (TfLiteIntArray*)&tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16128, (TfLiteIntArray*)&tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 288, (TfLiteIntArray*)&tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_ADD, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_ADD, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_ADD, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {
  if (i < 0) {
    tensor->data.data = nullptr;
    tensor->dims = nullptr;
    return;
  }

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 27; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 27; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  70, 
};
TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
